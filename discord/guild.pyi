import datetime
from .abc import Snowflake, SnowflakeTime
from .asset import Asset
from .channel import CategoryChannel, StageChannel, TextChannel, VoiceChannel
from .colour import Colour
from .emoji import Emoji
from .enums import AuditLogAction, ContentFilter, NotificationLevel, VerificationLevel, VideoQualityMode, VoiceRegion
from .file import File
from .flags import SystemChannelFlags
from .integrations import Integration
from .invite import Invite
from .iterators import AuditLogIterator, MemberIterator
from .member import Member
from .mixins import Hashable
from .permissions import PermissionOverwrite, Permissions
from .role import Role
from .stage_instance import StageInstance
from .state import ConnectionState
from .sticker import GuildSticker
from .template import Template
from .threads import Thread
from .user import User
from .voice_client import VoiceProtocol
from .webhook import Webhook
from .widget import Widget
from typing import AsyncIterator, Dict, List, Literal, NamedTuple, Optional, Sequence, Tuple, Union, overload

VocalGuildChannel = Union[VoiceChannel, StageChannel]
GuildChannel = Union[VoiceChannel, StageChannel, TextChannel, CategoryChannel]
ByCategoryItem = Tuple[Optional[CategoryChannel], List[GuildChannel]]

class BanEntry(NamedTuple):
    reason: Optional[str]
    user: User

class Guild(Hashable):
    @property
    def channels(self) -> List[GuildChannel]: ...
    @property
    def threads(self) -> List[Thread]: ...
    @property
    def large(self) -> bool: ...
    @property
    def voice_channels(self) -> List[VoiceChannel]: ...
    @property
    def stage_channels(self) -> List[StageChannel]: ...
    @property
    def me(self) -> Member: ...
    @property
    def voice_client(self) -> Optional[VoiceProtocol]: ...
    @property
    def text_channels(self) -> List[TextChannel]: ...
    @property
    def categories(self) -> List[CategoryChannel]: ...
    def by_category(self) -> List[ByCategoryItem]: ...
    def get_channel_or_thread(self, channel_id: int) -> Optional[Union[Thread, GuildChannel]]: ...
    def get_channel(self, channel_id: int) -> Optional[GuildChannel]: ...
    def get_thread(self, thread_id: int) -> Optional[Thread]: ...
    @property
    def system_channel(self) -> Optional[TextChannel]: ...
    @property
    def system_channel_flags(self) -> SystemChannelFlags: ...
    @property
    def rules_channel(self) -> Optional[TextChannel]: ...
    @property
    def public_updates_channel(self) -> Optional[TextChannel]: ...
    @property
    def emoji_limit(self) -> int: ...
    @property
    def sticker_limit(self) -> int: ...
    @property
    def bitrate_limit(self) -> float: ...
    @property
    def filesize_limit(self) -> int: ...
    @property
    def members(self) -> List[Member]: ...
    def get_member(self, user_id: int) -> Optional[Member]: ...
    @property
    def premium_subscribers(self) -> List[Member]: ...
    @property
    def roles(self) -> List[Role]: ...
    def get_role(self, role_id: int) -> Optional[Role]: ...
    @property
    def default_role(self) -> Role: ...
    @property
    def premium_subscriber_role(self) -> Optional[Role]: ...
    @property
    def self_role(self) -> Optional[Role]: ...
    @property
    def stage_instances(self) -> List[StageInstance]: ...
    def get_stage_instance(self, stage_instance_id: int) -> Optional[StageInstance]: ...
    @property
    def owner(self) -> Optional[Member]: ...
    @property
    def icon(self) -> Optional[Asset]: ...
    @property
    def banner(self) -> Optional[Asset]: ...
    @property
    def splash(self) -> Optional[Asset]: ...
    @property
    def discovery_splash(self) -> Optional[Asset]: ...
    @property
    def member_count(self) -> int: ...
    @property
    def chunked(self) -> bool: ...
    @property
    def shard_id(self) -> int: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def get_member_named(self, name: str) -> Optional[Member]: ...
    async def create_text_channel(self, name: str, *, reason: Optional[str] = ..., category: Optional[CategoryChannel] = ..., position: int = ..., topic: str = ..., slowmode_delay: int = ..., nsfw: bool = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ...) -> TextChannel: ...
    async def create_voice_channel(self, name: str, *, reason: Optional[str] = ..., category: Optional[CategoryChannel] = ..., position: int = ..., bitrate: int = ..., user_limit: int = ..., rtc_region: Optional[VoiceRegion] = ..., video_quality_mode: VideoQualityMode = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ...) -> VoiceChannel: ...
    async def create_stage_channel(self, name: str, topic: str, *, position: int = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ..., category: Optional[CategoryChannel] = ..., reason: Optional[str] = ...) -> StageChannel: ...
    async def create_category(self, name: str, *, overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ..., reason: Optional[str] = ..., position: int = ...) -> CategoryChannel: ...
    async def create_category_channel(self, name: str, *, overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ..., reason: Optional[str] = ..., position: int = ...) -> CategoryChannel: ...
    async def leave(self) -> None: ...
    async def delete(self) -> None: ...
    async def edit(self, *, reason: Optional[str] = ..., name: str = ..., description: Optional[str] = ..., icon: Optional[bytes] = ..., banner: Optional[bytes] = ..., splash: Optional[bytes] = ..., discovery_splash: Optional[bytes] = ..., community: bool = ..., region: Optional[Union[str, VoiceRegion]] = ..., afk_channel: Optional[VoiceChannel] = ..., owner: Snowflake = ..., afk_timeout: int = ..., default_notifications: NotificationLevel = ..., verification_level: VerificationLevel = ..., explicit_content_filter: ContentFilter = ..., vanity_code: str = ..., system_channel: Optional[TextChannel] = ..., system_channel_flags: SystemChannelFlags = ..., preferred_locale: str = ..., rules_channel: Optional[TextChannel] = ..., public_updates_channel: Optional[TextChannel] = ...) -> Guild: ...
    async def fetch_channels(self) -> Sequence[GuildChannel]: ...
    async def active_threads(self) -> List[Thread]: ...
    def fetch_members(self, *, limit: Optional[int] = ..., after: Optional[SnowflakeTime] = ...) -> MemberIterator: ...
    async def fetch_member(self, member_id: int) -> Member: ...
    async def fetch_ban(self, user: Snowflake) -> BanEntry: ...
    async def fetch_channel(self, channel_id: int) -> Union[GuildChannel, Thread]: ...
    def bans(self, *, limit: Optional[int] = ..., before: Snowflake = ..., after: Snowflake = ...) -> AsyncIterator[BanEntry]: ...
    async def prune_members(self, days: int, *, compute_prune_count: bool = ..., roles: List[Snowflake] = ..., reason: Optional[str] = ...) -> Optional[int]: ...
    async def templates(self) -> List[Template]: ...
    async def webhooks(self) -> List[Webhook]: ...
    async def estimate_pruned_members(self, days: int, *, roles: List[Snowflake] = ...) -> int: ...
    async def invites(self) -> List[Invite]: ...
    async def create_template(self, name: str, *, description: str = ...) -> Template: ...
    async def create_integration(self, type: str, id: int) -> None: ...
    async def integrations(self) -> List[Integration]: ...
    async def fetch_stickers(self) -> List[GuildSticker]: ...
    async def fetch_sticker(self, sticker_id: int) -> GuildSticker: ...
    async def create_sticker(self, name: str, *, description: Optional[str] = ..., emoji: str, file: File, reason: Optional[str] = ...) -> GuildSticker: ...
    async def delete_sticker(self, sticker: Snowflake, *, reason: Optional[str] = ...) -> None: ...
    async def fetch_emojis(self) -> List[Emoji]: ...
    async def fetch_emoji(self, emoji_id: int) -> Emoji: ...
    async def create_custom_emoji(self, name: str, image: bytes, *, roles: List[Role] = ..., reason: Optional[str] = ...) -> Emoji: ...
    async def delete_emoji(self, emoji: Snowflake, *, reason: Optional[str] = ...) -> None: ...
    async def fetch_roles(self) -> List[Role]: ...
    @overload
    async def create_role(self, *, reason: Optional[str] = ..., name: str = ..., permissions: Permissions = ..., colour: Union[Colour, int] = ..., hoist: bool = ..., mentionable: bool = ...) -> Role: ...
    @overload
    async def create_role(self, *, reason: Optional[str] = ..., name: str = ..., permissions: Permissions = ..., color: Union[Colour, int] = ..., hoist: bool = ..., mentionable: bool = ...) -> Role: ...
    async def edit_role_positions(self, positions: Dict[Snowflake, int], *, reason: Optional[str] = ...) -> List[Role]: ...
    async def kick(self, user: Snowflake, *, reason: Optional[str] = ...) -> None: ...
    async def ban(self, user: Snowflake, *, reason: Optional[str] = ..., delete_message_days: Literal[0, 1, 2, 3, 4, 5, 6, 7] = ...) -> None: ...
    async def unban(self, user: Snowflake, *, reason: Optional[str] = ...) -> None: ...
    async def vanity_invite(self) -> Optional[Invite]: ...
    def audit_logs(self, *, limit: int = ..., before: Optional[SnowflakeTime] = ..., after: Optional[SnowflakeTime] = ..., oldest_first: Optional[bool] = ..., user: Snowflake = ..., action: AuditLogAction = ...) -> AuditLogIterator: ...
    async def widget(self) -> Widget: ...
    async def edit_widget(self, *, enabled: bool = ..., channel: Optional[Snowflake] = ...) -> None: ...
    async def chunk(self, *, cache: bool = ...) -> None: ...
    async def query_members(self, query: Optional[str] = ..., *, limit: int = ..., user_ids: Optional[List[int]] = ..., presences: bool = ..., cache: bool = ...) -> List[Member]: ...
    async def change_voice_state(self, channel: Optional[VocalGuildChannel], *, self_mute: bool = ..., self_deaf: bool = ...) -> None: ...
