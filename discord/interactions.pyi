import datetime
from .app_commands.commands import Command, ContextMenu
from .app_commands.models import Choice, ChoiceT
from .app_commands.namespace import Namespace
from .channel import CategoryChannel, ForumChannel, PartialMessageable, StageChannel, TextChannel, VoiceChannel
from .client import Client
from .embeds import Embed
from .enums import InteractionType, Locale
from .file import File
from .guild import Guild
from .member import Member
from .mentions import AllowedMentions
from .message import Attachment, Message
from .permissions import Permissions
from .state import ConnectionState
from .threads import Thread
from .types.interactions import Interaction as InteractionPayload, InteractionData
from .ui.modal import Modal
from .ui.view import View
from .user import User
from .webhook.async_ import Webhook
from typing import Any, Dict, Optional, Sequence, Union

InteractionChannel = Union[VoiceChannel, StageChannel, TextChannel, ForumChannel, CategoryChannel, Thread, PartialMessageable]

class Interaction:
    id: int
    type: InteractionType
    guild_id: Optional[int]
    channel_id: Optional[int]
    data: Optional[InteractionData]
    application_id: int
    message: Optional[Message]
    user: Union[User, Member]
    token: str
    version: int
    locale: Locale
    guild_locale: Optional[Locale]
    extras: Dict[Any, Any]
    def __init__(self, *, data: InteractionPayload, state: ConnectionState) -> None: ...
    @property
    def client(self) -> Client: ...
    @property
    def guild(self) -> Optional[Guild]: ...
    def channel(self) -> Optional[InteractionChannel]: ...
    @property
    def permissions(self) -> Permissions: ...
    def namespace(self) -> Namespace: ...
    def command(self) -> Optional[Union[Command[Any, ..., Any], ContextMenu]]: ...
    def response(self) -> InteractionResponse: ...
    def followup(self) -> Webhook: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def expires_at(self) -> datetime.datetime: ...
    def is_expired(self) -> bool: ...
    async def original_message(self) -> InteractionMessage: ...
    async def edit_original_message(self, *, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> InteractionMessage: ...
    async def delete_original_message(self) -> None: ...

class InteractionResponse:
    def __init__(self, parent: Interaction) -> None: ...
    def is_done(self) -> bool: ...
    async def defer(self, *, ephemeral: bool = ..., thinking: bool = ...) -> None: ...
    async def pong(self) -> None: ...
    async def send_message(self, content: Optional[Any] = ..., *, embed: Embed = ..., embeds: Sequence[Embed] = ..., file: File = ..., files: Sequence[File] = ..., view: View = ..., tts: bool = ..., ephemeral: bool = ..., allowed_mentions: AllowedMentions = ..., suppress_embeds: bool = ...) -> None: ...
    async def edit_message(self, *, content: Optional[Any] = ..., embed: Optional[Embed] = ..., embeds: Sequence[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> None: ...
    async def send_modal(self, modal: Modal) -> None: ...
    async def autocomplete(self, choices: Sequence[Choice[ChoiceT]]) -> None: ...

class InteractionMessage(Message):
    async def edit(self, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> InteractionMessage: ... # type: ignore
    async def add_files(self, *files: File) -> InteractionMessage: ...
    async def remove_attachments(self, *attachments: Attachment) -> InteractionMessage: ...
    async def delete(self, *, delay: Optional[float] = ...) -> None: ...
