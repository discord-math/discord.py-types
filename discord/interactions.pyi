from .channel import CategoryChannel, PartialMessageable, StageChannel, TextChannel, VoiceChannel
from .embeds import Embed
from .file import File
from .guild import Guild
from .mentions import AllowedMentions
from .message import Attachment, Message
from .permissions import Permissions
from .state import ConnectionState
from .threads import Thread
from .ui.view import View
from .webhook.async_ import Webhook
from typing import Any, List, Optional, Union

InteractionChannel = Union[VoiceChannel, StageChannel, TextChannel, CategoryChannel, Thread, PartialMessageable]

class Interaction:
    @property
    def guild(self) -> Optional[Guild]: ...
    @property
    def channel(self) -> Optional[InteractionChannel]: ...
    @property
    def permissions(self) -> Permissions: ...
    @property
    def response(self) -> InteractionResponse: ...
    @property
    def followup(self) -> Webhook: ...
    async def original_message(self) -> InteractionMessage: ...
    async def edit_original_message(self, *, content: Optional[str] = ..., embeds: List[Embed] = ..., embed: Optional[Embed] = ..., file: File = ..., files: List[File] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> InteractionMessage: ...
    async def delete_original_message(self) -> None: ...

class InteractionResponse:
    def __init__(self, parent: Interaction) -> None: ...
    def is_done(self) -> bool: ...
    async def defer(self, *, ephemeral: bool = ...) -> None: ...
    async def pong(self) -> None: ...
    async def send_message(self, content: Optional[Any] = ..., *, embed: Embed = ..., embeds: List[Embed] = ..., view: View = ..., tts: bool = ..., ephemeral: bool = ...) -> None: ...
    async def edit_message(self, *, content: Optional[Any] = ..., embed: Optional[Embed] = ..., embeds: List[Embed] = ..., attachments: List[Attachment] = ..., view: Optional[View] = ...) -> None: ...

class InteractionMessage(Message):
    async def edit(self, content: Optional[str] = ..., embeds: List[Embed] = ..., embed: Optional[Embed] = ..., file: File = ..., files: List[File] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> InteractionMessage: ... # type: ignore
    async def delete(self, *, delay: Optional[float] = ...) -> None: ...
