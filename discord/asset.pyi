import io
import os
from .state import ConnectionState
from typing import Any, Literal, Union

class AssetMixin:
    @property
    def url(self) -> str: ...
    async def read(self) -> bytes: ...
    async def save(self, fp: Union[str, bytes, os.PathLike[str], os.PathLike[bytes], io.BufferedIOBase], *, seek_begin: bool = ...) -> int: ...

ValidStaticFormatTypes = Literal['webp', 'jpeg', 'jpg', 'png']
ValidAssetFormatTypes = Literal['webp', 'jpeg', 'jpg', 'png', 'gif']

class Asset(AssetMixin):
    BASE: str
    def __init__(self, state: ConnectionState, url: str, key: str, *, animated: bool = ...) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def url(self) -> str: ...
    @property
    def key(self) -> str: ...
    def is_animated(self) -> bool: ...
    def replace(self, *, size: int = ..., format: ValidAssetFormatTypes = ..., static_format: ValidStaticFormatTypes = ...) -> Asset: ...
    def with_size(self, size: int) -> Asset: ...
    def with_format(self, format: ValidAssetFormatTypes) -> Asset: ...
    def with_static_format(self, format: ValidStaticFormatTypes) -> Asset: ...
