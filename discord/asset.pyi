import io
import os
from .file import File
from .state import ConnectionState
from .webhook.async_ import _WebhookState
from typing import Any, Literal, Optional, TypeVar, Union

_State = Union[ConnectionState, _WebhookState]
ValidStaticFormatTypes = Literal['webp', 'jpeg', 'jpg', 'png']
ValidAssetFormatTypes = Literal['webp', 'jpeg', 'jpg', 'png', 'gif']

class AssetMixin:
    url: str
    async def read(self) -> bytes: ...
    async def save(self, fp: Union[str, bytes, os.PathLike[Any], io.BufferedIOBase], *, seek_begin: bool = ...) -> int: ...
    async def to_file(self, *, filename: Optional[str] = ..., description: Optional[str] = ..., spoiler: bool = ...) -> File: ...

A = TypeVar('A', bound='Asset')

class Asset(AssetMixin):
    BASE: str
    def __init__(self, state: _State, *, url: str, key: str, animated: bool = ...) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def url(self) -> str: ... # type: ignore
    @property
    def key(self) -> str: ...
    def is_animated(self) -> bool: ...
    def replace(self: A, *, size: int = ..., format: ValidAssetFormatTypes = ..., static_format: ValidStaticFormatTypes = ...) -> A: ...
    def with_size(self: A, size: int) -> A: ...
    def with_format(self: A, format: ValidAssetFormatTypes) -> A: ...
    def with_static_format(self: A, format: ValidStaticFormatTypes) -> A: ...
