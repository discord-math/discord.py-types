from aiohttp import ClientResponse, ClientWebSocketResponse
from .interactions import Interaction
from typing import Any, Dict, Optional, Union

_ResponseType = ClientResponse

class DiscordException(Exception): ...
class ClientException(DiscordException): ...
class NoMoreItems(DiscordException): ...

class GatewayNotFound(DiscordException):
    def __init__(self) -> None: ...

class HTTPException(DiscordException):
    response: _ResponseType
    status: int
    code: int
    text: str
    def __init__(self, response: _ResponseType, message: Optional[Union[str, Dict[str, Any]]]) -> None: ...

class Forbidden(HTTPException): ...
class NotFound(HTTPException): ...
class DiscordServerError(HTTPException): ...
class InvalidData(ClientException): ...
class InvalidArgument(ClientException): ...
class LoginFailure(ClientException): ...

class ConnectionClosed(ClientException):
    code: int
    reason: str
    shard_id: Optional[int]
    def __init__(self, socket: ClientWebSocketResponse, shard_id: Optional[int], *, code: Optional[int] = ...) -> None: ...

class PrivilegedIntentsRequired(ClientException):
    shard_id: Optional[int]
    def __init__(self, shard_id: Optional[int]) -> None: ...

class InteractionResponded(ClientException):
    interaction: Interaction
    def __init__(self, interaction: Interaction) -> None: ...
