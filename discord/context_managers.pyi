import asyncio
import types
from .abc import Messageable
from typing import Optional, Type, TypeVar

TypingT = TypeVar('TypingT', bound='Typing')

class Typing:
    loop: asyncio.AbstractEventLoop
    messageable: Messageable
    def __init__(self, messageable: Messageable) -> None: ...
    async def do_typing(self) -> None: ...
    task: asyncio.Task[None]
    def __enter__(self) -> TypingT: ...
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[types.TracebackType]) -> None: ...
    async def __aenter__(self) -> TypingT: ...
    async def __aexit__(self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[types.TracebackType]) -> None: ...
