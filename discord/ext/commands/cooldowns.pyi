from ...message import Message
from discord.enums import Enum
from typing import Any, Callable, Optional, TypeVar

C = TypeVar('C', bound='CooldownMapping')
MC = TypeVar('MC', bound='MaxConcurrency')

class BucketType(Enum):
    default: int
    user: int
    guild: int
    channel: int
    member: int
    category: int
    role: int
    def get_key(self, msg: Message) -> Any: ...
    def __call__(self, msg: Message) -> Any: ...

class Cooldown:
    rate: int
    per: float
    def __init__(self, rate: float, per: float) -> None: ...
    def get_tokens(self, current: Optional[float] = ...) -> int: ...
    def get_retry_after(self, current: Optional[float] = ...) -> float: ...
    def update_rate_limit(self, current: Optional[float] = ...) -> Optional[float]: ...
    def reset(self) -> None: ...
    def copy(self) -> Cooldown: ...

class CooldownMapping:
    def __init__(self, original: Optional[Cooldown], type: Callable[[Message], Any]) -> None: ...
    def copy(self) -> CooldownMapping: ...
    @property
    def valid(self) -> bool: ...
    @property
    def type(self) -> Callable[[Message], Any]: ...
    @classmethod
    def from_cooldown(cls, rate: int, per: float, type: BucketType) -> C: ...
    def create_bucket(self, message: Message) -> Cooldown: ...
    def get_bucket(self, message: Message, current: Optional[float] = ...) -> Cooldown: ...
    def update_rate_limit(self, message: Message, current: Optional[float] = ...) -> Optional[float]: ...

class DynamicCooldownMapping(CooldownMapping):
    def __init__(self, factory: Callable[[Message], Cooldown], type: Callable[[Message], Any]) -> None: ...
    def copy(self) -> DynamicCooldownMapping: ...
    @property
    def valid(self) -> bool: ...
    def create_bucket(self, message: Message) -> Cooldown: ...

class MaxConcurrency:
    per: BucketType
    number: int
    wait: bool
    def __init__(self, number: int, per: BucketType, wait: bool) -> None: ...
    def copy(self) -> MC: ...
    def get_key(self, message: Message) -> Any: ...
    async def acquire(self, message: Message) -> None: ...
    async def release(self, message: Message) -> None: ...
