from ._types import Check
from .cog import Cog
from .context import Context
from .core import Command, Group
from discord.abc import Messageable
from typing import Any, Callable, Dict, Iterable, List, Mapping, Optional, Pattern, Sequence, Type

class Paginator:
    prefix: str
    suffix: str
    max_size: int
    linesep: str
    def __init__(self, prefix: str = ..., suffix: str = ..., max_size: int = ..., linesep: str = ...) -> None: ...
    def clear(self) -> None: ...
    def add_line(self, line: str = ..., *, empty: bool = ...) -> None: ...
    def close_page(self) -> None: ...
    def __len__(self) -> int: ...
    @property
    def pages(self) -> int: ...

class HelpCommand:
    MENTION_TRANSFORMS: Dict[str, str]
    MENTION_PATTERN: Pattern[str]
    __original_kwargs__: Any
    __original_args__: Any
    show_hidden: bool
    verify_checks: Optional[bool]
    command_attrs: Dict[str, Any]
    context: Optional[Context]
    def __init__(self, **options: Any) -> None: ...
    def copy(self) -> HelpCommand: ...
    def add_check(self, func: Check) -> None: ...
    def remove_check(self, func: Check) -> None: ...
    def get_bot_mapping(self) -> Mapping[Optional[Cog], List[Command]]: ...
    @property
    def invoked_with(self) -> str: ...
    def get_command_signature(self, command: Command) -> str: ...
    def remove_mentions(self, string: str) -> str: ...
    @property
    def cog(self) -> Optional[Cog]: ...
    @cog.setter
    def cog(self, cog: Optional[Cog]) -> None: ...
    def command_not_found(self, string: str) -> str: ...
    def subcommand_not_found(self, command: Command, string: str) -> str: ...
    async def filter_commands(self, commands: Iterable[Command], *, sort: bool = ..., key: Optional[Callable[[Command], Any]] = ...) -> List[Command]: ...
    def get_max_size(self, commands: Sequence[Command]) -> int: ...
    def get_destination(self) -> Messageable: ...
    async def send_error_message(self, error: str) -> None: ...
    async def on_help_command_error(self, ctx: Context, error: str) -> None: ...
    async def send_bot_help(self, mapping: Mapping[Optional[Cog], List[Command]]) -> None: ...
    async def send_cog_help(self, cog: Cog) -> None: ...
    async def send_group_help(self, group: Group) -> None: ...
    async def send_command_help(self, command: Command) -> None: ...
    async def prepare_help_command(self, ctx: Context, command: Optional[str] = ...) -> None: ...
    async def command_callback(self, ctx: Context, *, command: Optional[str] = ...) -> None: ...

class DefaultHelpCommand(HelpCommand):
    width: int
    indent: int
    sort_commands: bool
    dm_help: Optional[bool]
    dm_help_threshold: Optional[int]
    commands_heading: str
    no_category: str
    paginator: Type[Paginator]

class MinimalHelpCommand(HelpCommand):
    sort_commands: bool
    commands_heading: str
    dm_help: Optional[bool]
    dm_help_threshold: Optional[bool]
    aliases_heading: str
    no_category: str
    paginator: Type[Paginator]
