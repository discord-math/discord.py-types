import discord.abc
from ._types import BotT, Check, ContextT, _Bot
from .cog import Cog
from .context import Context
from .core import Command, Group
from .errors import CommandError
from typing import Any, Callable, Dict, Iterable, List, Mapping, Optional, Sequence, Tuple, Type, TypeVar

FuncT = TypeVar('FuncT', bound=Callable[..., Any])

class Paginator:
    prefix: Optional[str]
    suffix: Optional[str]
    max_size: int
    linesep: str
    def __init__(self, prefix: Optional[str] = ..., suffix: Optional[str] = ..., max_size: int = ..., linesep: str = ...) -> None: ...
    def clear(self) -> None: ...
    def add_line(self, line: str = ..., *, empty: bool = ...) -> None: ...
    def close_page(self) -> None: ...
    def __len__(self) -> int: ...
    @property
    def pages(self) -> List[str]: ...

HC = TypeVar('HC', bound='HelpCommand')

class HelpCommand:
    __original_kwargs__: Dict[str, Any]
    __original_args__: Tuple[Any, ...]
    def __new__(cls: Type[HC], *args: Any, **kwargs: Any) -> HC: ...
    show_hidden: bool
    verify_checks: bool
    command_attrs: Dict[str, Any]
    context: Context[_Bot]
    def __init__(self, **options: Any) -> None: ...
    def copy(self: HC) -> HC: ...
    def add_check(self, func: Check[ContextT]) -> None: ...
    def remove_check(self, func: Check[ContextT]) -> None: ...
    def get_bot_mapping(self) -> Dict[Optional[Cog], List[Command[Any, Any, ..., Any]]]: ...
    @property
    def invoked_with(self) -> Optional[str]: ...
    def get_command_signature(self, command: Command[Any, Any, ..., Any]) -> str: ...
    def remove_mentions(self, string: str) -> str: ...
    @property
    def cog(self) -> Optional[Cog]: ...
    @cog.setter
    def cog(self, cog: Optional[Cog]) -> None: ...
    def command_not_found(self, string: str) -> str: ...
    def subcommand_not_found(self, command: Command[Any, Any, ..., Any], string: str) -> str: ...
    async def filter_commands(self, commands: Iterable[Command[Any, Any, ..., Any]], *, sort: bool = ..., key: Optional[Callable[[Command[Any, Any, ..., Any]], Any]] = ...) -> List[Command[Any, Any, ..., Any]]: ...
    def get_max_size(self, commands: Sequence[Command[Any, Any, ..., Any]]) -> int: ...
    def get_destination(self) -> discord.abc.MessageableChannel: ...
    async def send_error_message(self, error: str) -> None: ...
    async def on_help_command_error(self, ctx: Context[BotT], error: CommandError) -> None: ...
    async def send_bot_help(self, mapping: Mapping[Optional[Cog], List[Command[Any, Any, ..., Any]]]) -> None: ...
    async def send_cog_help(self, cog: Cog) -> None: ...
    async def send_group_help(self, group: Group[Any, Any, ..., Any]) -> None: ...
    async def send_command_help(self, command: Command[Any, Any, ..., Any]) -> None: ...
    async def prepare_help_command(self, ctx: Context[BotT], command: Optional[str] = ...) -> None: ...
    async def command_callback(self, ctx: Context[BotT], *, command: Optional[str] = ...) -> None: ...

class DefaultHelpCommand(HelpCommand):
    width: int
    indent: int
    sort_commands: bool
    dm_help: bool
    dm_help_threshold: int
    commands_heading: str
    no_category: str
    paginator: Paginator
    def __init__(self, **options: Any) -> None: ...
    def shorten_text(self, text: str) -> str: ...
    def get_ending_note(self) -> str: ...
    def add_indented_commands(self, commands: Sequence[Command[Any, Any, ..., Any]], *, heading: str, max_size: Optional[int] = ...) -> None: ...
    async def send_pages(self) -> None: ...
    def add_command_formatting(self, command: Command[Any, Any, ..., Any]) -> None: ...
    def get_destination(self) -> discord.abc.Messageable: ... # type: ignore
    async def prepare_help_command(self, ctx: Context[BotT], command: Optional[str]) -> None: ... # type: ignore
    async def send_bot_help(self, mapping: Mapping[Optional[Cog], List[Command[Any, Any, ..., Any]]]) -> None: ...
    async def send_command_help(self, command: Command[Any, Any, ..., Any]) -> None: ...
    async def send_group_help(self, group: Group[Any, Any, ..., Any]) -> None: ...
    async def send_cog_help(self, cog: Cog) -> None: ...

class MinimalHelpCommand(HelpCommand):
    sort_commands: bool
    commands_heading: str
    dm_help: bool
    dm_help_threshold: int
    aliases_heading: str
    no_category: str
    paginator: Paginator
    def __init__(self, **options: Any) -> None: ...
    async def send_pages(self) -> None: ...
    def get_opening_note(self) -> str: ...
    def get_command_signature(self, command: Command[Any, Any, ..., Any]) -> str: ...
    def get_ending_note(self) -> str: ...
    def add_bot_commands_formatting(self, commands: Sequence[Command[Any, Any, ..., Any]], heading: str) -> None: ...
    def add_subcommand_formatting(self, command: Command[Any, Any, ..., Any]) -> None: ...
    def add_aliases_formatting(self, aliases: Sequence[str]) -> None: ...
    def add_command_formatting(self, command: Command[Any, Any, ..., Any]) -> None: ...
    def get_destination(self) -> discord.abc.Messageable: ... # type: ignore
    async def prepare_help_command(self, ctx: Context[BotT], command: Optional[str]) -> None: ... # type: ignore
    async def send_bot_help(self, mapping: Mapping[Optional[Cog], List[Command[Any, Any, ..., Any]]]) -> None: ...
    async def send_cog_help(self, cog: Cog) -> None: ...
    async def send_group_help(self, group: Group[Any, Any, ..., Any]) -> None: ...
    async def send_command_help(self, command: Command[Any, Any, ..., Any]) -> None: ...
