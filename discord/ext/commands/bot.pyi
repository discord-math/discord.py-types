import types
from discord.client import Client
from discord.message import Message
from discord.shard import AutoShardedClient
from discord.user import User
from ._types import Check, CoroFunc
from .cog import Cog
from .errors import CommandError
from .context import Context
from .core import GroupMixin
from .help import HelpCommand
from typing import Any, Callable, List, Mapping, Optional, Type, TypeVar, Union

T = TypeVar('T', bound=Context)
CFT = TypeVar('CFT', bound=CoroFunc)

def when_mentioned(bot: Union[Bot, AutoShardedBot], msg: Message) -> List[str]: ...
def when_mentioned_or(*prefixes: str) -> Callable[[Union[Bot, AutoShardedBot], Message], List[str]]: ...

class BotBase(GroupMixin):
    command_prefix: Any
    extra_events: Any
    description: Any
    owner_id: Any
    owner_ids: Any
    strip_after_prefix: Any
    def __init__(self, command_prefix: Any, help_command: Any = ..., description: Any | None = ..., **options: Any) -> None: ...
    def dispatch(self, event: str, *args: Any, **kwargs: Any) -> None: ...
    async def close(self) -> None: ...
    async def on_command_error(self, context: Context, exception: CommandError) -> None: ...
    def check(self, func: T) -> T: ...
    def add_check(self, func: Check, *, call_once: bool = ...) -> None: ...
    def remove_check(self, func: Check, *, call_once: bool = ...) -> None: ...
    def check_once(self, func: CFT) -> CFT: ...
    async def can_run(self, ctx: Context, *, call_once: bool = ...) -> bool: ...
    async def is_owner(self, user: User) -> bool: ...
    def before_invoke(self, coro: CFT) -> CFT: ...
    def after_invoke(self, coro: CFT) -> CFT: ...
    def add_listener(self, func: CoroFunc, name: str = ...) -> None: ...
    def remove_listener(self, func: CoroFunc, name: str = ...) -> None: ...
    def listen(self, name: str = ...) -> Callable[[CFT], CFT]: ...
    async def add_cog(self, cog: Cog, *, override: bool = ...) -> None: ...
    def get_cog(self, name: str) -> Optional[Cog]: ...
    async def remove_cog(self, name: str) -> Optional[Cog]: ...
    @property
    def cogs(self) -> Mapping[str, Cog]: ...
    async def load_extension(self, name: str, *, package: Optional[str] = ...) -> None: ...
    async def unload_extension(self, name: str, *, package: Optional[str] = ...) -> None: ...
    async def reload_extension(self, name: str, *, package: Optional[str] = ...) -> None: ...
    @property
    def extensions(self) -> Mapping[str, types.ModuleType]: ...
    @property
    def help_command(self) -> Optional[HelpCommand]: ...
    @help_command.setter
    def help_command(self, value: Optional[HelpCommand]) -> None: ...
    async def get_prefix(self, message: Message) -> Union[List[str], str]: ...
    async def get_context(self, message: Message, *, cls: Type[T] = ...) -> T: ...
    async def invoke(self, ctx: Context) -> None: ...
    async def process_commands(self, message: Message) -> None: ...
    async def on_message(self, message: Message) -> None: ...

class Bot(BotBase, Client): ...
class AutoShardedBot(BotBase, AutoShardedClient): ...
