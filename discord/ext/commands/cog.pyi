from .context import Context
from .core import Command
from typing import Any, Callable, ClassVar, Dict, Generator, List, Tuple, TypeVar

FuncT = TypeVar('FuncT', bound=Callable[..., Any])

class CogMeta(type):
    __cog_name__: str
    __cog_settings__: Dict[str, Any]
    __cog_commands__: List[Command]
    __cog_listeners__: List[Tuple[str, str]]
    def __new__(cls, *args: Any, **kwargs: Any) -> CogMeta: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @classmethod
    def qualified_name(cls) -> str: ...

class Cog(metaclass=CogMeta):
    __cog_name__: ClassVar[str]
    __cog_settings__: ClassVar[Dict[str, Any]]
    __cog_commands__: ClassVar[List[Command]]
    __cog_listeners__: ClassVar[List[Tuple[str, str]]]
    __cog_description__: Any
    def get_commands(self) -> List[Command]: ...
    @property
    def qualified_name(self) -> str: ...
    @property
    def description(self) -> str: ...
    @description.setter
    def description(self, description: str) -> None: ...
    def walk_commands(self) -> Generator[Command, None, None]: ...
    def get_listeners(self) -> List[Tuple[str, Callable[..., Any]]]: ...
    @classmethod
    def listener(cls, name: str = ...) -> Callable[[FuncT], FuncT]: ...
    def has_error_handler(self) -> bool: ...
    async def cog_unload(self) -> None: ...
    def bot_check_once(self, ctx: Context) -> bool: ...
    def bot_check(self, ctx: Context) -> bool: ...
    def cog_check(self, ctx: Context) -> bool: ...
    async def cog_command_error(self, ctx: Context, error: Exception) -> None: ...
    async def cog_before_invoke(self, ctx: Context) -> None: ...
    async def cog_after_invoke(self, ctx: Context) -> None: ...
