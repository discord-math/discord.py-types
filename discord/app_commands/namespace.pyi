from ..interactions import Interaction
from ..types.interactions import ApplicationCommandInteractionDataOption, ResolvedData
from typing import Any, Iterator, List, NamedTuple, Tuple

class ResolveKey(NamedTuple):
    id: str
    type: int
    @classmethod
    def any_with(cls, id: str) -> ResolveKey: ...
    def __eq__(self, o: object) -> bool: ...
    def __hash__(self) -> int: ...

class Namespace:
    def __init__(self, interaction: Interaction, resolved: ResolvedData, options: List[ApplicationCommandInteractionDataOption]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, key: str) -> Any: ...
    def __contains__(self, key: str) -> Any: ...
    def __getattr__(self, attr: str) -> Any: ...
    def __iter__(self) -> Iterator[Tuple[str, Any]]: ...
