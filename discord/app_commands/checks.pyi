from ..interactions import Interaction
from typing import Any, Callable, Coroutine, Hashable, Optional, TypeVar, Union

T = TypeVar('T')
CooldownFunction = Union[Callable[[Interaction], Coroutine[Any, Any, T]], Callable[[Interaction], T]]
C = TypeVar('C', bound='Cooldown')

class Cooldown:
    rate: int
    per: float
    def __init__(self, rate: float, per: float) -> None: ...
    def get_tokens(self, current: Optional[float] = ...) -> int: ...
    def get_retry_after(self, current: Optional[float] = ...) -> float: ...
    def update_rate_limit(self, current: Optional[float] = ..., *, tokens: int = ...) -> Optional[float]: ...
    def reset(self) -> None: ...
    def copy(self: C) -> C: ...

def has_role(item: Union[int, str]) -> Callable[[T], T]: ...
def has_any_role(*items: Union[int, str]) -> Callable[[T], T]: ...
def has_permissions(**perms: bool) -> Callable[[T], T]: ...
def bot_has_permissions(**perms: bool) -> Callable[[T], T]: ...
def cooldown(rate: float, per: float, *, key: Optional[CooldownFunction[Hashable]] = ...) -> Callable[[T], T]: ...
def dynamic_cooldown(factory: CooldownFunction[Optional[Cooldown]], *, key: Optional[CooldownFunction[Hashable]] = ...) -> Callable[[T], T]: ...
