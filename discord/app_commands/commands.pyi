from discord.ext.commands import Cog
from ..abc import Snowflake
from ..enums import AppCommandType
from ..interactions import Interaction
from ..member import Member
from ..message import Message
from ..permissions import Permissions
from ..user import User
from .errors import AppCommandError
from .models import Choice, ChoiceT as ChoiceT
from typing import Any, Callable, ClassVar, Concatenate, Coroutine, Dict, Generator, Generic, List, Optional, ParamSpec, Type, TypeVar, Union, overload

P = ParamSpec('P')
T = TypeVar('T')
F = TypeVar('F', bound=Callable[..., Any])
GroupT = TypeVar('GroupT', bound='Binding')
Coro = Coroutine[Any, Any, T]
UnboundError = Callable[['Interaction', AppCommandError], Coro[Any]]
Error = Union[Callable[[GroupT, 'Interaction', AppCommandError], Coro[Any]], UnboundError]
Check = Callable[['Interaction'], Union[bool, Coro[bool]]]
Binding = Union['Group', 'Cog']
ContextMenuCallback = Union[Callable[['Interaction', Member], Coro[Any]], Callable[['Interaction', User], Coro[Any]], Callable[['Interaction', Message], Coro[Any]], Callable[['Interaction', Union[Member, User]], Coro[Any]]]
AutocompleteCallback = Union[Callable[[GroupT, 'Interaction', ChoiceT], Coro[List[Choice[ChoiceT]]]], Callable[['Interaction', ChoiceT], Coro[List[Choice[ChoiceT]]]]]

class Command(Generic[GroupT, P, T]):
    name: str
    description: str
    parent: Optional[Group]
    binding: Optional[GroupT]
    on_error: Optional[Error[GroupT]]
    module: Optional[str]
    checks: List[Check]
    default_permissions: Optional[Permissions]
    guild_only: bool
    def __init__(self, *, name: str, description: str, callback: Union[Callable[Concatenate[GroupT, 'Interaction', P], Coro[T]], Callable[Concatenate['Interaction', P], Coro[T]]], parent: Optional[Group] = ..., guild_ids: Optional[List[int]] = ...) -> None: ...
    def __set_name__(self, owner: Type[Any], name: str) -> None: ...
    @property
    def callback(self) -> Union[Callable[Concatenate[GroupT, 'Interaction', P], Coro[T]], Callable[Concatenate['Interaction', P], Coro[T]]]: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @property
    def root_parent(self) -> Optional[Group]: ...
    def error(self, coro: Error[GroupT]) -> Error[GroupT]: ...
    def autocomplete(self, name: str) -> Callable[[AutocompleteCallback[GroupT, ChoiceT]], AutocompleteCallback[GroupT, ChoiceT]]: ...
    def add_check(self, func: Check) -> None: ...
    def remove_check(self, func: Check) -> None: ...

class ContextMenu:
    name: str
    type: AppCommandType
    module: Optional[str]
    on_error: Optional[UnboundError]
    default_permissions: Optional[Permissions]
    guild_only: bool
    checks: List[Check]
    def __init__(self, *, name: str, callback: ContextMenuCallback, type: AppCommandType = ..., guild_ids: Optional[List[int]] = ...) -> None: ...
    @property
    def callback(self) -> ContextMenuCallback: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def error(self, coro: UnboundError) -> UnboundError: ...
    def add_check(self, func: Check) -> None: ...
    def remove_check(self, func: Check) -> None: ...

class Group:
    __discord_app_commands_group_children__: ClassVar[List[Union[Command[Any, ..., Any], Group]]]
    __discord_app_commands_skip_init_binding__: bool
    __discord_app_commands_group_name__: str
    __discord_app_commands_group_description__: str
    __discord_app_commands_group_guild_only__: bool
    __discord_app_commands_group_default_permissions__: Optional[Permissions]
    __discord_app_commands_has_module__: bool
    def __init_subclass__(cls, *, name: str = ..., description: str = ..., guild_only: bool = ..., default_permissions: Optional[Permissions] = ...) -> None: ...
    name: str
    description: str
    default_permissions: Optional[Permissions]
    guild_only: bool
    parent: Optional[Group]
    module: Optional[str]
    def __init__(self, *, name: str = ..., description: str = ..., parent: Optional[Group] = ..., guild_ids: Optional[List[int]] = ..., guild_only: bool = ..., default_permissions: Optional[Permissions] = ...) -> None: ...
    def __set_name__(self, owner: Type[Any], name: str) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @property
    def root_parent(self) -> Optional[Group]: ...
    @property
    def commands(self) -> List[Union[Command[Any, ..., Any], Group]]: ...
    def walk_commands(self) -> Generator[Union[Command[Any, ..., Any], Group], None, None]: ...
    async def on_error(self, interaction: Interaction, error: AppCommandError) -> None: ...
    async def interaction_check(self, interaction: Interaction) -> bool: ...
    def add_command(self, command: Union[Command[Any, ..., Any], Group], *, override: bool = ...) -> None: ...
    def remove_command(self, name: str) -> Optional[Union[Command[Any, ..., Any], Group]]: ...
    def get_command(self, name: str) -> Optional[Union[Command[Any, ..., Any], Group]]: ...
    def command(self, *, name: str = ..., description: str = ...) -> Callable[[Union[Callable[Concatenate[GroupT, 'Interaction', P], Coro[T]], Callable[Concatenate['Interaction', P], Coro[T]]]], Command[GroupT, P, T]]: ...

def command(*, name: str = ..., description: str = ...) -> Callable[[Union[Callable[Concatenate[GroupT, 'Interaction', P], Coro[T]], Callable[Concatenate['Interaction', P], Coro[T]]]], Command[GroupT, P, T]]: ...
def context_menu(*, name: str = ...) -> Callable[[ContextMenuCallback], ContextMenu]: ...
def describe(**parameters: str) -> Callable[[T], T]: ...
def rename(**parameters: str) -> Callable[[T], T]: ...
def choices(**parameters: List[Choice[ChoiceT]]) -> Callable[[T], T]: ...
def autocomplete(**parameters: AutocompleteCallback[GroupT, ChoiceT]) -> Callable[[T], T]: ...
def guilds(*guild_ids: Union[Snowflake, int]) -> Callable[[T], T]: ...
def check(predicate: Check) -> Callable[[T], T]: ...
@overload
def guild_only(func: None = ...) -> Callable[[T], T]: ... # type: ignore
@overload
def guild_only(func: T) -> T: ...
def default_permissions(**perms: bool) -> Callable[[T], T]: ...
