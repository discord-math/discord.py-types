import datetime
import discord.abc
from .abc import Snowflake, SnowflakeTime
from .asset import Asset
from .enums import ChannelType, StagePrivacyLevel, VideoQualityMode, VoiceRegion
from .guild import Guild, GuildChannel as GuildChannelType
from .iterators import ArchivedThreadIterator
from .member import Member, VoiceState
from .message import Message, PartialMessage
from .mixins import Hashable
from .permissions import PermissionOverwrite, Permissions
from .role import Role
from .stage_instance import StageInstance
from .state import ConnectionState
from .threads import Thread
from .types.threads import ThreadArchiveDuration
from .user import BaseUser, ClientUser, User
from .webhook import Webhook
from typing import Any, Callable, Dict, Iterable, List, Mapping, Optional, Union

class TextChannel(discord.abc.Messageable, discord.abc.GuildChannel, Hashable):
    name: str
    id: int
    guild: Guild
    topic: Optional[str]
    nsfw: bool
    category_id: Optional[int]
    position: int
    slowmode_delay: int
    last_message_id: int
    default_auto_archive_duration: ThreadArchiveDuration
    @property
    def type(self) -> ChannelType: ...
    def permissions_for(self, obj: Union[Member, Role]) -> Permissions: ...
    @property
    def members(self) -> List[Member]: ...
    @property
    def threads(self) -> List[Thread]: ...
    def is_nsfw(self) -> bool: ...
    def is_news(self) -> bool: ...
    @property
    def last_message(self) -> Optional[Message]: ...
    async def edit(self, *, reason: Optional[str] = ..., name: str = ..., topic: str = ..., position: int = ..., nsfw: bool = ..., sync_permissions: bool = ..., category: Optional[CategoryChannel] = ..., slowmode_delay: int = ..., default_auto_archive_duration: ThreadArchiveDuration = ..., type: ChannelType = ..., overwrites: Mapping[Union[Role, Member, Snowflake], PermissionOverwrite] = ...) -> Optional[TextChannel]: ...
    async def clone(self, *, name: Optional[str] = ..., reason: Optional[str] = ...) -> TextChannel: ...
    async def delete_messages(self, messages: Iterable[Snowflake]) -> None: ...
    async def purge(self, *, limit: Optional[int] = ..., check: Callable[[Message], bool] = ..., before: Optional[SnowflakeTime] = ..., after: Optional[SnowflakeTime] = ..., around: Optional[SnowflakeTime] = ..., oldest_first: Optional[bool] = ..., bulk: bool = ...) -> List[Message]: ...
    async def webhooks(self) -> List[Webhook]: ...
    async def create_webhook(self, name: str, *, avatar: Optional[bytes] = ..., reason: Optional[str] = ...) -> Webhook: ...
    async def follow(self, destination: TextChannel, *, reason: Optional[str] = ...) -> Webhook: ...
    def get_partial_message(self, message_id: int) -> PartialMessage: ...
    def get_thread(self, thread_id: int) -> Optional[Thread]: ...
    async def create_thread(self, name: str, *, message: Optional[Snowflake] = ..., auto_archive_duration: ThreadArchiveDuration = ..., type: Optional[ChannelType] = ..., reason: Optional[str] = ...) -> Thread: ...
    def archived_threads(self, *, private: bool = ..., joined: bool = ..., limit: Optional[int] = ..., before: Optional[Union[Snowflake, datetime.datetime]] = ...) -> ArchivedThreadIterator: ...

class VocalGuildChannel(discord.abc.Connectable, discord.abc.GuildChannel, Hashable):
    name: str
    id: int
    guild: Guild
    bitrate: int
    user_limit: int
    position: int
    category_id: Optional[int]
    rtc_region: Optional[VoiceRegion]
    video_quality_mode: VideoQualityMode
    @property
    def members(self) -> List[Member]: ...
    @property
    def voice_states(self) -> Dict[int, VoiceState]: ...
    def permissions_for(self, obj: Union[Member, Role]) -> Permissions: ...

class VoiceChannel(VocalGuildChannel):
    @property
    def type(self) -> ChannelType: ...
    async def clone(self, *, name: Optional[str] = ..., reason: Optional[str] = ...) -> VoiceChannel: ...
    async def edit(self, *, name: str = ..., bitrate: int = ..., user_limit: int = ..., position: int = ..., sync_permissions: int = ..., category: Optional[CategoryChannel] = ..., overwrites: Mapping[Union[Role, Member], PermissionOverwrite] = ..., rtc_region: Optional[VoiceRegion] = ..., video_quality_mode: VideoQualityMode = ..., reason: Optional[str] = ...) -> Optional[VoiceChannel]: ...

class StageChannel(VocalGuildChannel):
    topic: str
    @property
    def requesting_to_speak(self) -> List[Member]: ...
    @property
    def speakers(self) -> List[Member]: ...
    @property
    def listeners(self) -> List[Member]: ...
    @property
    def moderators(self) -> List[Member]: ...
    @property
    def type(self) -> ChannelType: ...
    async def clone(self, *, name: Optional[str] = ..., reason: Optional[str] = ...) -> StageChannel: ...
    @property
    def instance(self) -> Optional[StageInstance]: ...
    async def create_instance(self, topic: str, *, privacy_level: StagePrivacyLevel = ..., reason: Optional[str] = ...) -> StageInstance: ...
    async def fetch_instance(self) -> StageInstance: ...
    async def edit(self, *, name: str = ..., topic: Optional[str] = ..., position: int = ..., sync_permissions: int = ..., category: Optional[CategoryChannel] = ..., overwrites: Mapping[Union[Role, Member], PermissionOverwrite] = ..., rtc_region: Optional[VoiceRegion] = ..., video_quality_mode: VideoQualityMode = ..., reason: Optional[str] = ...) -> Optional[StageChannel]: ...

class CategoryChannel(discord.abc.GuildChannel, Hashable):
    name: str
    id: int
    guild: Guild
    nsfw: bool
    position: int
    category_id: Optional[int]
    @property
    def type(self) -> ChannelType: ...
    def is_nsfw(self) -> bool: ...
    async def clone(self, *, name: Optional[str] = ..., reason: Optional[str] = ...) -> CategoryChannel: ...
    async def edit(self, *, name: str = ..., position: int = ..., nsfw: bool = ..., overwrites: Mapping[Union[Role, Member], PermissionOverwrite] = ..., reason: Optional[str] = ...) -> Optional[CategoryChannel]: ...
    @property
    def channels(self) -> List[GuildChannelType]: ...
    @property
    def text_channels(self) -> List[TextChannel]: ...
    @property
    def voice_channels(self) -> List[VoiceChannel]: ...
    @property
    def stage_channels(self) -> List[StageChannel]: ...
    async def create_text_channel(self, name: str, *, reason: Optional[str] = ..., position: int = ..., topic: str = ..., slowmode_delay: int = ..., nsfw: bool = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ...) -> TextChannel: ...
    async def create_voice_channel(self, name: str, *, reason: Optional[str] = ..., position: int = ..., bitrate: int = ..., user_limit: int = ..., rtc_region: Optional[VoiceRegion] = ..., video_quality_mode: VideoQualityMode = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ...) -> VoiceChannel: ...
    async def create_stage_channel(self, name: str, topic: str, *, position: int = ..., overwrites: Dict[Union[Role, Member], PermissionOverwrite] = ..., reason: Optional[str] = ...) -> StageChannel: ...

class DMChannel(discord.abc.Messageable, Hashable):
    recipient: Optional[User]
    me: ClientUser
    id: int
    @property
    def type(self) -> ChannelType: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def permissions_for(self, obj: Any = ...) -> Permissions: ...
    def get_partial_message(self, message_id: int) -> PartialMessage: ...

class GroupChannel(discord.abc.Messageable, Hashable):
    id: int
    recipients: List[User]
    owner_id: Optional[int]
    owner: Optional[BaseUser]
    name: Optional[str]
    me: ClientUser
    @property
    def type(self) -> ChannelType: ...
    @property
    def icon(self) -> Optional[Asset]: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    def permissions_for(self, obj: Snowflake) -> Permissions: ...
    async def leave(self) -> None: ...

class PartialMessageable(discord.abc.Messageable, Hashable):
    id: int
    type: Optional[ChannelType]
    def __init__(self, state: ConnectionState, id: int, type: Optional[ChannelType] = ...) -> None: ...
    def get_partial_message(self, message_id: int) -> PartialMessage: ...
