import aiohttp
import asyncio
import datetime
from ..abc import Snowflake
from ..asset import Asset
from ..channel import TextChannel, VoiceChannel
from ..embeds import Embed
from ..emoji import Emoji
from ..enums import WebhookType
from ..file import File
from ..guild import Guild
from ..http import HTTPClient, MultipartParameters, Response, Route
from ..mentions import AllowedMentions
from ..message import Attachment, Message
from ..mixins import Hashable
from ..partial_emoji import PartialEmoji
from ..state import ConnectionState
from ..types.channel import PartialChannel as PartialChannelPayload
from ..types.emoji import PartialEmoji as PartialEmojiPayload
from ..types.message import Message as MessagePayload
from ..types.user import PartialUser as PartialUserPayload, User as UserPayload
from ..types.webhook import SourceGuild as SourceGuildPayload, Webhook as WebhookPayload
from ..ui.view import View
from ..user import BaseUser, User
from types import TracebackType
from typing import Any, Dict, List, Literal, Optional, Sequence, Type, TypeVar, Union, overload

BE = TypeVar('BE', bound=BaseException)
_State = Union[ConnectionState, '_WebhookState']
ADL = TypeVar('ADL', bound='AsyncDeferredLock')

class AsyncDeferredLock:
    lock: asyncio.Lock
    delta: Optional[float]
    def __init__(self, lock: asyncio.Lock) -> None: ...
    async def __aenter__(self: ADL) -> ADL: ...
    def delay_by(self, delta: float) -> None: ...
    async def __aexit__(self, exc_type: Optional[Type[BE]], exc: Optional[BE], traceback: Optional[TracebackType]) -> None: ...

class AsyncWebhookAdapter:
    def __init__(self) -> None: ...
    async def request(self, route: Route, session: aiohttp.ClientSession, *, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., reason: Optional[str] = ..., auth_token: Optional[str] = ..., params: Optional[Dict[str, Any]] = ...) -> Any: ...
    def delete_webhook(self, webhook_id: int, *, token: Optional[str] = ..., session: aiohttp.ClientSession, reason: Optional[str] = ...) -> Response[None]: ...
    def delete_webhook_with_token(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, reason: Optional[str] = ...) -> Response[None]: ...
    def edit_webhook(self, webhook_id: int, token: str, payload: Dict[str, Any], *, session: aiohttp.ClientSession, reason: Optional[str] = ...) -> Response[WebhookPayload]: ...
    def edit_webhook_with_token(self, webhook_id: int, token: str, payload: Dict[str, Any], *, session: aiohttp.ClientSession, reason: Optional[str] = ...) -> Response[WebhookPayload]: ...
    def execute_webhook(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., thread_id: Optional[int] = ..., wait: bool = ...) -> Response[Optional[MessagePayload]]: ...
    def get_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, thread_id: Optional[int] = ...) -> Response[MessagePayload]: ...
    def edit_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., thread_id: Optional[int] = ...) -> Response[Message]: ...
    def delete_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: aiohttp.ClientSession, thread_id: Optional[int] = ...) -> Response[None]: ...
    def fetch_webhook(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession) -> Response[WebhookPayload]: ...
    def fetch_webhook_with_token(self, webhook_id: int, token: str, *, session: aiohttp.ClientSession) -> Response[WebhookPayload]: ...
    def create_interaction_response(self, interaction_id: int, token: str, *, session: aiohttp.ClientSession, params: MultipartParameters) -> Response[None]: ...
    def get_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession) -> Response[MessagePayload]: ...
    def edit_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ...) -> Response[MessagePayload]: ...
    def delete_original_interaction_response(self, application_id: int, token: str, *, session: aiohttp.ClientSession) -> Response[None]: ...

class PartialWebhookChannel(Hashable):
    id: int
    name: str
    def __init__(self, *, data: PartialChannelPayload) -> None: ...

class PartialWebhookGuild(Hashable):
    id: int
    name: str
    def __init__(self, *, data: SourceGuildPayload, state: _State) -> None: ...
    @property
    def icon(self) -> Optional[Asset]: ...

class _FriendlyHttpAttributeErrorHelper:
    def __getattr__(self, attr: str) -> Any: ...

class _WebhookState:
    def __init__(self, webhook: Any, parent: Optional[_State], thread: Snowflake = ...) -> None: ...
    def store_user(self, data: Union[UserPayload, PartialUserPayload]) -> BaseUser: ...
    def create_user(self, data: Union[UserPayload, PartialUserPayload]) -> BaseUser: ...
    def get_reaction_emoji(self, data: PartialEmojiPayload) -> Union[PartialEmoji, Emoji, str]: ...
    @property
    def http(self) -> Union[HTTPClient, _FriendlyHttpAttributeErrorHelper]: ...
    def __getattr__(self, attr: str) -> Any: ...

class WebhookMessage(Message):
    async def edit(self, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> WebhookMessage: ... # type: ignore
    async def add_files(self, *files: File) -> WebhookMessage: ...
    async def remove_attachments(self, *attachments: Attachment) -> WebhookMessage: ...
    async def delete(self, *, delay: Optional[float] = ...) -> None: ...

class BaseWebhook(Hashable):
    id: int
    type: WebhookType
    guild_id: Optional[int]
    channel_id: Optional[int]
    token: Optional[str]
    auth_token: Optional[str]
    user: Optional[Union[BaseUser, User]]
    name: Optional[str]
    source_channel: Optional[PartialWebhookChannel]
    source_guild: Optional[PartialWebhookGuild]
    def __init__(self, data: WebhookPayload, token: Optional[str] = ..., state: Optional[_State] = ...) -> None: ...
    def is_partial(self) -> bool: ...
    def is_authenticated(self) -> bool: ...
    @property
    def guild(self) -> Optional[Guild]: ...
    @property
    def channel(self) -> Optional[Union[VoiceChannel, TextChannel]]: ...
    @property
    def created_at(self) -> datetime.datetime: ...
    @property
    def avatar(self) -> Optional[Asset]: ...
    @property
    def default_avatar(self) -> Asset: ...
    @property
    def display_avatar(self) -> Asset: ...

W = TypeVar('W', bound='Webhook')

class Webhook(BaseWebhook):
    session: aiohttp.ClientSession
    def __init__(self, data: WebhookPayload, session: aiohttp.ClientSession, token: Optional[str] = ..., state: Optional[_State] = ...) -> None: ...
    @property
    def url(self) -> str: ...
    @classmethod
    def partial(cls: Type[W], id: int, token: str, *, session: aiohttp.ClientSession, bot_token: Optional[str] = ...) -> W: ...
    @classmethod
    def from_url(cls: Type[W], url: str, *, session: aiohttp.ClientSession, bot_token: Optional[str] = ...) -> W: ...
    @classmethod
    def from_state(cls: Type[W], data: WebhookPayload, state: ConnectionState) -> W: ...
    async def fetch(self, *, prefer_auth: bool = ...) -> Webhook: ...
    async def delete(self, *, reason: Optional[str] = ..., prefer_auth: bool = ...) -> None: ...
    async def edit(self, *, reason: Optional[str] = ..., name: Optional[str] = ..., avatar: Optional[bytes] = ..., channel: Optional[Snowflake] = ..., prefer_auth: bool = ...) -> Webhook: ...
    @overload
    async def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., ephemeral: bool = ..., file: File = ..., files: Sequence[File] = ..., embed: Embed = ..., embeds: Sequence[Embed] = ..., allowed_mentions: AllowedMentions = ..., view: View = ..., thread: Snowflake = ..., wait: Literal[True], suppress_embeds: bool = ...) -> WebhookMessage: ...
    @overload
    async def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., ephemeral: bool = ..., file: File = ..., files: Sequence[File] = ..., embed: Embed = ..., embeds: Sequence[Embed] = ..., allowed_mentions: AllowedMentions = ..., view: View = ..., thread: Snowflake = ..., wait: Literal[False] = ..., suppress_embeds: bool = ...) -> None: ...
    async def fetch_message(self, id: int, *, thread: Snowflake = ...) -> WebhookMessage: ...
    async def edit_message(self, message_id: int, *, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., view: Optional[View] = ..., allowed_mentions: Optional[AllowedMentions] = ..., thread: Snowflake = ...) -> WebhookMessage: ...
    async def delete_message(self, message_id: int, *, thread: Snowflake = ...) -> None: ...
