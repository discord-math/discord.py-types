import threading
from ..abc import Snowflake
from ..embeds import Embed
from ..file import File
from ..http import Route
from ..mentions import AllowedMentions
from ..message import Attachment, Message
from ..state import ConnectionState
from ..types.message import Message as MessagePayload
from ..types.webhook import Webhook as WebhookPayload
from .async_ import BaseWebhook, _WebhookState
from requests import Session
from types import TracebackType
from typing import Any, Dict, List, Literal, Optional, Sequence, Type, TypeVar, Union, overload

BE = TypeVar('BE', bound=BaseException)

DL = TypeVar('DL', bound='DeferredLock')

class DeferredLock:
    lock: threading.Lock
    delta: Optional[float]
    def __init__(self, lock: threading.Lock) -> None: ...
    def __enter__(self: DL) -> DL: ...
    def delay_by(self, delta: float) -> None: ...
    def __exit__(self, exc_type: Optional[Type[BE]], exc: Optional[BE], traceback: Optional[TracebackType]) -> None: ...

class WebhookAdapter:
    def __init__(self) -> None: ...
    def request(self, route: Route, session: Session, *, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., reason: Optional[str] = ..., auth_token: Optional[str] = ..., params: Optional[Dict[str, Any]] = ...) -> Any: ...
    def delete_webhook(self, webhook_id: int, *, token: Optional[str] = ..., session: Session, reason: Optional[str] = ...) -> None: ...
    def delete_webhook_with_token(self, webhook_id: int, token: str, *, session: Session, reason: Optional[str] = ...) -> None: ...
    def edit_webhook(self, webhook_id: int, token: str, payload: Dict[str, Any], *, session: Session, reason: Optional[str] = ...) -> WebhookPayload: ...
    def edit_webhook_with_token(self, webhook_id: int, token: str, payload: Dict[str, Any], *, session: Session, reason: Optional[str] = ...) -> WebhookPayload: ...
    def execute_webhook(self, webhook_id: int, token: str, *, session: Session, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., thread_id: Optional[int] = ..., wait: bool = ...) -> MessagePayload: ...
    def get_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, thread_id: Optional[int] = ...) -> MessagePayload: ...
    def edit_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, payload: Optional[Dict[str, Any]] = ..., multipart: Optional[List[Dict[str, Any]]] = ..., files: Optional[Sequence[File]] = ..., thread_id: Optional[int] = ...) -> MessagePayload: ...
    def delete_webhook_message(self, webhook_id: int, token: str, message_id: int, *, session: Session, thread_id: Optional[int] = ...) -> None: ...
    def fetch_webhook(self, webhook_id: int, token: str, *, session: Session) -> WebhookPayload: ...
    def fetch_webhook_with_token(self, webhook_id: int, token: str, *, session: Session) -> WebhookPayload: ...

class _WebhookContext(threading.local):
    adapter: Optional[WebhookAdapter]

class SyncWebhookMessage(Message):
    def edit(self, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> SyncWebhookMessage: ... # type: ignore
    def add_files(self, *files: File) -> SyncWebhookMessage: ... # type: ignore
    def remove_attachments(self, *attachments: Attachment) -> SyncWebhookMessage: ... # type: ignore
    def delete(self, *, delay: Optional[float] = ...) -> None: ... # type: ignore

class SyncWebhook(BaseWebhook):
    session: Session
    def __init__(self, data: WebhookPayload, session: Session, token: Optional[str] = ..., state: Optional[Union[ConnectionState, _WebhookState]] = ...) -> None: ...
    @property
    def url(self) -> str: ...
    @classmethod
    def partial(cls, id: int, token: str, *, session: Session = ..., bot_token: Optional[str] = ...) -> SyncWebhook: ...
    @classmethod
    def from_url(cls, url: str, *, session: Session = ..., bot_token: Optional[str] = ...) -> SyncWebhook: ...
    def fetch(self, *, prefer_auth: bool = ...) -> SyncWebhook: ...
    def delete(self, *, reason: Optional[str] = ..., prefer_auth: bool = ...) -> None: ...
    def edit(self, *, reason: Optional[str] = ..., name: Optional[str] = ..., avatar: Optional[bytes] = ..., channel: Optional[Snowflake] = ..., prefer_auth: bool = ...) -> SyncWebhook: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: Sequence[File] = ..., embed: Embed = ..., embeds: Sequence[Embed] = ..., allowed_mentions: AllowedMentions = ..., thread: Snowflake = ..., wait: Literal[True], suppress_embeds: bool = ...) -> SyncWebhookMessage: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: Sequence[File] = ..., embed: Embed = ..., embeds: Sequence[Embed] = ..., allowed_mentions: AllowedMentions = ..., thread: Snowflake = ..., wait: Literal[False] = ..., suppress_embeds: bool = ...) -> None: ...
    def fetch_message(self, id: int, *, thread: Snowflake = ...) -> SyncWebhookMessage: ...
    def edit_message(self, message_id: int, *, content: Optional[str] = ..., embeds: Sequence[Embed] = ..., embed: Optional[Embed] = ..., attachments: Sequence[Union[Attachment, File]] = ..., allowed_mentions: Optional[AllowedMentions] = ..., thread: Snowflake = ...) -> SyncWebhookMessage: ...
    def delete_message(self, message_id: int, *, thread: Snowflake = ...) -> None: ...
