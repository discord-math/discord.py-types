from requests import Session
from ..abc import Snowflake
from ..embeds import Embed
from ..file import File
from ..mentions import AllowedMentions
from ..message import Message
from .async_ import BaseWebhook
from typing import Any, Dict, List, Literal, Optional, overload

class SyncWebhookMessage(Message):
    def edit(self, content: Optional[str] = ..., embeds: List[Embed] = ..., embed: Optional[Embed] = ..., file: File = ..., files: List[File] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> SyncWebhookMessage: ... # type: ignore
    def delete(self, *, delay: Optional[float] = ...) -> None: ... # type: ignore

class SyncWebhook(BaseWebhook):
    session: Session
    @property
    def url(self) -> str: ...
    @classmethod
    def partial(cls, id: int, token: str, *, session: Session = ..., bot_token: Optional[str] = ...) -> SyncWebhook: ...
    @classmethod
    def from_url(cls, url: str, *, session: Session = ..., bot_token: Optional[str] = ...) -> SyncWebhook: ...
    def fetch(self, *, prefer_auth: bool = ...) -> SyncWebhook: ...
    def delete(self, *, reason: Optional[str] = ..., prefer_auth: bool = ...) -> None: ...
    def edit(self, *, reason: Optional[str] = ..., name: Optional[str] = ..., avatar: Optional[bytes] = ..., channel: Optional[Snowflake] = ..., prefer_auth: bool = ...) -> SyncWebhook: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: List[File] = ..., embed: Embed = ..., embeds: List[Embed] = ..., allowed_mentions: AllowedMentions = ..., wait: Literal[True]) -> SyncWebhookMessage: ...
    @overload
    def send(self, content: str = ..., *, username: str = ..., avatar_url: Any = ..., tts: bool = ..., file: File = ..., files: List[File] = ..., embed: Embed = ..., embeds: List[Embed] = ..., allowed_mentions: AllowedMentions = ..., wait: Literal[False] = ...) -> None: ...
    def fetch_message(self, id: int) -> SyncWebhookMessage: ...
    def edit_message(self, message_id: int, *, content: Optional[str] = ..., embeds: List[Embed] = ..., embed: Optional[Embed] = ..., file: File = ..., files: List[File] = ..., allowed_mentions: Optional[AllowedMentions] = ...) -> SyncWebhookMessage: ...
    def delete_message(self, message_id: int) -> None: ...
