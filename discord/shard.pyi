from .gateway import *
from .activity import BaseActivity
from .client import Client
from .enums import Status
from .flags import Intents
from .gateway import DiscordWebSocket
from typing import Any, Callable, Dict, List, Optional, Tuple

class EventType:
    close: int
    reconnect: int
    resume: int
    identify: int
    terminate: int
    clean_close: int

class EventItem:
    type: int
    shard: Optional['Shard']
    error: Optional[Exception]
    def __init__(self, etype: int, shard: Optional['Shard'], error: Optional[Exception]) -> None: ...
    def __lt__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Shard:
    ws: DiscordWebSocket
    def __init__(self, ws: DiscordWebSocket, client: AutoShardedClient, queue_put: Callable[[EventItem], None]) -> None: ...
    @property
    def id(self) -> int: ...
    def launch(self) -> None: ...
    async def close(self) -> None: ...
    async def disconnect(self) -> None: ...
    async def worker(self) -> None: ...
    async def reidentify(self, exc: ReconnectWebSocket) -> None: ...
    async def reconnect(self) -> None: ...

class ShardInfo:
    id: int
    shard_count: Optional[int]
    def __init__(self, parent: Shard, shard_count: Optional[int]) -> None: ...
    def is_closed(self) -> bool: ...
    async def disconnect(self) -> None: ...
    async def reconnect(self) -> None: ...
    async def connect(self) -> None: ...
    @property
    def latency(self) -> float: ...
    def is_ws_ratelimited(self) -> bool: ...

class AutoShardedClient(Client):
    shard_ids: Optional[List[int]]
    def __init__(self, *args: Any, intents: Intents, **kwargs: Any) -> None: ...
    @property
    def latency(self) -> float: ...
    @property
    def latencies(self) -> List[Tuple[int, float]]: ...
    def get_shard(self, shard_id: int) -> Optional[ShardInfo]: ...
    @property
    def shards(self) -> Dict[int, ShardInfo]: ...
    async def launch_shard(self, gateway: str, shard_id: int, *, initial: bool = ...) -> None: ...
    shard_count: int
    async def launch_shards(self) -> None: ...
    async def connect(self, *, reconnect: bool = ...) -> None: ...
    async def close(self) -> None: ...
    async def change_presence(self, *, activity: Optional[BaseActivity] = ..., status: Optional[Status] = ..., shard_id: Optional[int] = ...) -> None: ...
    def is_ws_ratelimited(self) -> bool: ...
