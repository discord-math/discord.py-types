import datetime
import discord.abc
from .abc import Snowflake
from .activity import ActivityTypes
from .asset import Asset
from .channel import DMChannel, StageChannel, VoiceChannel
from .colour import Colour
from .enums import Status
from .flags import PublicUserFlags
from .guild import Guild
from .message import Message
from .permissions import Permissions
from .role import Role
from .state import ConnectionState
from .user import _UserTag
from typing import Any, List, Literal, Optional, Tuple, Union

VocalGuildChannel = Union[VoiceChannel, StageChannel]

class VoiceState:
    session_id: str

class Member(discord.abc.Messageable, _UserTag):
    name: str
    id: int
    discriminator: str
    bot: bool
    system: bool
    created_at: datetime.datetime
    default_avatar: Asset
    avatar: Optional[Asset]
    dm_channel: Optional[DMChannel]
    async def create_dm(self) -> DMChannel: ...
    mutual_guilds: List[Guild]
    public_flags: PublicUserFlags
    banner: Optional[Asset]
    accent_color: Optional[Colour]
    accent_colour: Optional[Colour]
    guild: Guild
    joined_at: Optional[datetime.datetime]
    premium_since: Optional[datetime.datetime]
    activities: Tuple[ActivityTypes, ...]
    nick: Optional[str]
    pending: bool
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def status(self) -> Status: ...
    @status.setter
    def status(self, value: Status) -> None: ...
    @property
    def raw_status(self) -> str: ...
    @property
    def mobile_status(self) -> Status: ...
    @property
    def desktop_status(self) -> Status: ...
    @property
    def web_status(self) -> Status: ...
    def is_on_mobile(self) -> bool: ...
    @property
    def colour(self) -> Colour: ...
    @property
    def color(self) -> Colour: ...
    @property
    def roles(self) -> List[Role]: ...
    @property
    def mention(self) -> str: ...
    @property
    def display_name(self) -> str: ...
    @property
    def display_avatar(self) -> Asset: ...
    @property
    def guild_avatar(self) -> Optional[Asset]: ...
    @property
    def activity(self) -> Optional[ActivityTypes]: ...
    def mentioned_in(self, message: Message) -> bool: ...
    @property
    def top_role(self) -> Role: ...
    @property
    def guild_permissions(self) -> Permissions: ...
    @property
    def voice(self) -> Optional[VoiceState]: ...
    async def ban(self, *, delete_message_days: Literal[0, 1, 2, 3, 4, 5, 6, 7] = ..., reason: Optional[str] = ...) -> None: ...
    async def unban(self, *, reason: Optional[str] = ...) -> None: ...
    async def kick(self, *, reason: Optional[str] = ...) -> None: ...
    async def edit(self, *, nick: Optional[str] = ..., mute: bool = ..., deafen: bool = ..., suppress: bool = ..., roles: List[discord.abc.Snowflake] = ..., voice_channel: Optional[VocalGuildChannel] = ..., reason: Optional[str] = ...) -> Optional[Member]: ...
    async def request_to_speak(self) -> None: ...
    async def move_to(self, channel: VocalGuildChannel, *, reason: Optional[str] = ...) -> None: ...
    async def add_roles(self, *roles: Snowflake, reason: Optional[str] = ..., atomic: bool = ...) -> None: ...
    async def remove_roles(self, *roles: Snowflake, reason: Optional[str] = ..., atomic: bool = ...) -> None: ...
    def get_role(self, role_id: int) -> Optional[Role]: ...
