import datetime
from .colour import Colour
from .enums import ActivityType
from .partial_emoji import PartialEmoji
from .types.activity import Activity as ActivityPayload, ActivityTimestamps, ActivityParty, ActivityAssets
from typing import Any, Dict, List, Optional, Union, overload

class BaseActivity:
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def created_at(self) -> Optional[datetime.datetime]: ...
    def to_dict(self) -> ActivityPayload: ...

class Activity(BaseActivity):
    state: Optional[str]
    details: Optional[str]
    timestamps: ActivityTimestamps
    assets: ActivityAssets
    party: ActivityParty
    flags: int
    sync_id: Optional[str]
    session_id: Optional[str]
    type: ActivityType
    name: Optional[str]
    url: Optional[str]
    application_id: Optional[int]
    emoji: Optional[PartialEmoji]
    buttons: List[str]
    def __init__(self, **kwargs: Any) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ... # type: ignore
    @property
    def start(self) -> Optional[datetime.datetime]: ...
    @property
    def end(self) -> Optional[datetime.datetime]: ...
    @property
    def large_image_url(self) -> Optional[str]: ...
    @property
    def small_image_url(self) -> Optional[str]: ...
    @property
    def large_image_text(self) -> Optional[str]: ...
    @property
    def small_image_text(self) -> Optional[str]: ...

class Game(BaseActivity):
    name: str
    def __init__(self, name: str, **extra: Any) -> None: ...
    @property
    def type(self) -> ActivityType: ...
    @property
    def start(self) -> Optional[datetime.datetime]: ...
    @property
    def end(self) -> Optional[datetime.datetime]: ...
    def to_dict(self) -> Dict[str, Any]: ... # type: ignore
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Streaming(BaseActivity):
    platform: Optional[str]
    name: Optional[str]
    game: Optional[str]
    url: str
    details: Optional[str]
    assets: ActivityAssets
    def __init__(self, *, name: Optional[str], url: str, **extra: Any) -> None: ...
    @property
    def type(self) -> ActivityType: ...
    @property
    def twitch_name(self) -> Optional[str]: ...
    def to_dict(self) -> Dict[str, Any]: ... # type: ignore
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Spotify:
    def __init__(self, **data: Any) -> None: ...
    @property
    def type(self) -> ActivityType: ...
    @property
    def created_at(self) -> Optional[datetime.datetime]: ...
    @property
    def colour(self) -> Colour: ...
    @property
    def color(self) -> Colour: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @property
    def name(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def title(self) -> str: ...
    @property
    def artists(self) -> List[str]: ...
    @property
    def artist(self) -> str: ...
    @property
    def album(self) -> str: ...
    @property
    def album_cover_url(self) -> str: ...
    @property
    def track_id(self) -> str: ...
    @property
    def track_url(self) -> str: ...
    @property
    def start(self) -> datetime.datetime: ...
    @property
    def end(self) -> datetime.datetime: ...
    @property
    def duration(self) -> datetime.timedelta: ...
    @property
    def party_id(self) -> str: ...

class CustomActivity(BaseActivity):
    name: Optional[str]
    emoji: Optional[PartialEmoji]
    state: Optional[str]
    def __init__(self, name: Optional[str], *, emoji: Optional[PartialEmoji] = ..., **extra: Any) -> None: ...
    @property
    def type(self) -> ActivityType: ...
    def to_dict(self) -> Dict[str, Any]: ... # type: ignore
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
ActivityTypes = Union[Activity, Game, CustomActivity, Streaming, Spotify]
