from .abc import Snowflake
from .emoji import Emoji
from .member import Member
from .message import Message
from .partial_emoji import PartialEmoji
from .types.message import Reaction as ReactionPayload
from .user import User
from typing import AsyncIterator, Optional, Union

class Reaction:
    message: Message
    count: int
    emoji: Union[PartialEmoji, Emoji, str]
    me: bool
    def __init__(self, *, message: Message, data: ReactionPayload, emoji: Optional[Union[PartialEmoji, Emoji, str]] = ...) -> None: ...
    def is_custom_emoji(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    async def remove(self, user: Snowflake) -> None: ...
    async def clear(self) -> None: ...
    async def users(self, *, limit: Optional[int] = ..., after: Optional[Snowflake] = ...) -> AsyncIterator[Union[Member, User]]: ...
