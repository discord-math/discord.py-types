from .abc import Snowflake
from .asset import AssetMixin
from .guild import Guild
from .partial_emoji import _EmojiTag
from .role import Role
from .state import ConnectionState
from .types.emoji import Emoji as EmojiPayload
from .user import User
from datetime import datetime
from typing import Any, Collection, Iterator, List, Optional, Tuple

class Emoji(_EmojiTag, AssetMixin):
    require_colons: bool
    animated: bool
    managed: bool
    id: int
    name: str
    guild_id: int
    user: Optional[User]
    available: bool
    def __init__(self, *, guild: Guild, state: ConnectionState, data: EmojiPayload) -> None: ...
    def __iter__(self) -> Iterator[Tuple[str, Any]]: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def created_at(self) -> datetime: ...
    @property
    def url(self) -> str: ... # type: ignore
    @property
    def roles(self) -> List[Role]: ...
    @property
    def guild(self) -> Optional[Guild]: ...
    def is_usable(self) -> bool: ...
    async def delete(self, *, reason: Optional[str] = ...) -> None: ...
    async def edit(self, *, name: str = ..., roles: Collection[Snowflake] = ..., reason: Optional[str] = ...) -> Emoji: ...
