from ..components import TextInput as TextInputComponent
from ..enums import ComponentType, TextStyle
from ..types.components import TextInput as TextInputPayload
from .item import Item
from .view import View
from typing import Any, Literal, Optional, Tuple, Type, TypeVar

V = TypeVar('V', bound='View', covariant=True)
TI = TypeVar('TI', bound='TextInput[Any]')

class TextInput(Item[V]):
    __item_repr_attributes__: Tuple[str, ...]
    row: Optional[int]
    def __init__(self, *, label: str, style: TextStyle = ..., custom_id: str = ..., placeholder: Optional[str] = ..., default: Optional[str] = ..., required: bool = ..., min_length: Optional[int] = ..., max_length: Optional[int] = ..., row: Optional[int] = ...) -> None: ...
    @property
    def custom_id(self) -> str: ...
    @custom_id.setter
    def custom_id(self, value: str) -> None: ...
    @property
    def width(self) -> int: ...
    @property
    def value(self) -> Optional[str]: ...
    @property
    def label(self) -> str: ...
    @label.setter
    def label(self, value: str) -> None: ...
    @property
    def placeholder(self) -> Optional[str]: ...
    @placeholder.setter
    def placeholder(self, value: Optional[str]) -> None: ...
    @property
    def required(self) -> bool: ...
    @required.setter
    def required(self, value: bool) -> None: ...
    @property
    def min_length(self) -> Optional[int]: ...
    @min_length.setter
    def min_length(self, value: Optional[int]) -> None: ...
    @property
    def max_length(self) -> Optional[int]: ...
    @max_length.setter
    def max_length(self, value: Optional[int]) -> None: ...
    @property
    def style(self) -> TextStyle: ...
    @style.setter
    def style(self, value: TextStyle) -> None: ...
    @property
    def default(self) -> Optional[str]: ...
    @default.setter
    def default(self, value: Optional[str]) -> None: ...
    def to_component_dict(self) -> TextInputPayload: ... # type: ignore
    @classmethod
    def from_component(cls: Type[TI], component: TextInputComponent) -> TI: ... # type: ignore
    @property
    def type(self) -> Literal[ComponentType.text_input]: ...
    def is_dispatchable(self) -> bool: ...
