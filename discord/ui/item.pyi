from ..components import Component
from ..enums import ComponentType
from ..interactions import Interaction
from .view import View
from typing import Any, Callable, Coroutine, Dict, Generic, Optional, Tuple, Type, TypeVar

I = TypeVar('I', bound='Item[Any]')
V = TypeVar('V', bound='View', covariant=True)
ItemCallbackType = Callable[[V, Interaction, I], Coroutine[Any, Any, Any]]

class Item(Generic[V]):
    __item_repr_attributes__: Tuple[str, ...]
    def __init__(self) -> None: ...
    def to_component_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def from_component(cls: Type[I], component: Component) -> I: ...
    @property
    def type(self) -> ComponentType: ...
    def is_dispatchable(self) -> bool: ...
    def is_persistent(self) -> bool: ...
    @property
    def row(self) -> Optional[int]: ...
    @row.setter
    def row(self, value: Optional[int]) -> None: ...
    @property
    def width(self) -> int: ...
    @property
    def view(self) -> Optional[V]: ...
    async def callback(self, interaction: Interaction) -> Any: ...
