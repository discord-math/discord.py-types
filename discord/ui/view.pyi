from ..components import Component
from ..interactions import Interaction
from ..message import Message
from ..state import ConnectionState
from .item import Item, ItemCallbackType
from typing import Any, ClassVar, Dict, List, Optional, Sequence, Type, TypeVar

V = TypeVar('V', bound='View')

class View:
    __discord_ui_view__: ClassVar[bool]
    __view_children_items__: ClassVar[List[ItemCallbackType[Item[View]]]]
    def __init_subclass__(cls) -> None: ...
    timeout: Optional[float]
    children: List[Item[View]]
    id: str
    def __init__(self, *, timeout: Optional[float] = ...) -> None: ...
    def to_components(self) -> List[Dict[str, Any]]: ...
    @classmethod
    def from_message(cls: Type[V], message: Message, *, timeout: Optional[float] = ...) -> V: ...
    def add_item(self: V, item: Item[V]) -> None: ...
    def remove_item(self: V, item: Item[V]) -> None: ...
    def clear_items(self) -> None: ...
    async def interaction_check(self, interaction: Interaction) -> bool: ...
    async def on_timeout(self) -> None: ...
    async def on_error(self: V, error: Exception, item: Item[V], interaction: Interaction) -> None: ...
    def refresh(self, components: List[Component]) -> None: ...
    def stop(self) -> None: ...
    def is_finished(self) -> bool: ...
    def is_dispatching(self) -> bool: ...
    def is_persistent(self) -> bool: ...
    async def wait(self) -> bool: ...
