from ..interactions import Interaction
from ..message import Message
from ..state import ConnectionState
from ..types.components import Component as ComponentPayload
from ..types.interactions import ModalSubmitComponentInteractionData as ModalSubmitComponentInteractionDataPayload
from .item import Item, ItemCallbackType
from typing import Any, ClassVar, Coroutine, Dict, List, Optional, Sequence, Type, TypeVar

class _ViewWeights:
    weights: List[int]
    def __init__(self, children: List[Item[Any]]) -> None: ...
    def find_open_space(self, item: Item[Any]) -> int: ...
    def add_item(self, item: Item[Any]) -> None: ...
    def remove_item(self, item: Item[Any]) -> None: ...
    def clear(self) -> None: ...

class _ViewCallback:
    view: View
    callback: ItemCallbackType[Any, Any]
    item: Item[View]
    def __init__(self, callback: ItemCallbackType[Any, Any], view: View, item: Item[View]) -> None: ...
    def __call__(self, interaction: Interaction) -> Coroutine[Any, Any, Any]: ...

V = TypeVar('V', bound='View')

class View:
    __discord_ui_view__: ClassVar[bool]
    __discord_ui_modal__: ClassVar[bool]
    __view_children_items__: ClassVar[List[ItemCallbackType[Any, Any]]]
    def __init_subclass__(cls) -> None: ...
    id: str
    def __init__(self, *, timeout: Optional[float] = ...) -> None: ...
    def to_components(self) -> List[Dict[str, Any]]: ...
    @property
    def timeout(self) -> Optional[float]: ...
    @timeout.setter
    def timeout(self, value: Optional[float]) -> None: ...
    @property
    def children(self: V) -> List[Item[V]]: ...
    @classmethod
    def from_message(cls, message: Message, *, timeout: Optional[float] = ...) -> View: ...
    def add_item(self: V, item: Item[Any]) -> V: ...
    def remove_item(self: V, item: Item[Any]) -> V: ...
    def clear_items(self: V) -> V: ...
    async def interaction_check(self, interaction: Interaction) -> bool: ...
    async def on_timeout(self) -> None: ...
    async def on_error(self, interaction: Interaction, error: Exception, item: Item[Any]) -> None: ...
    def stop(self) -> None: ...
    def is_finished(self) -> bool: ...
    def is_dispatching(self) -> bool: ...
    def is_persistent(self) -> bool: ...
    async def wait(self) -> bool: ...

class ViewStore:
    def __init__(self, state: ConnectionState) -> None: ...
    @property
    def persistent_views(self) -> Sequence[View]: ...
    def add_view(self, view: View, message_id: Optional[int] = ...) -> None: ...
    def remove_view(self, view: View) -> None: ...
    def dispatch_view(self, component_type: int, custom_id: str, interaction: Interaction) -> None: ...
    def dispatch_modal(self, custom_id: str, interaction: Interaction, components: List[ModalSubmitComponentInteractionDataPayload]) -> None: ...
    def remove_interaction_mapping(self, interaction_id: int) -> None: ...
    def is_message_tracked(self, message_id: int) -> bool: ...
    def remove_message_tracking(self, message_id: int) -> Optional[View]: ...
    def update_from_message(self, message_id: int, components: List[ComponentPayload]) -> None: ...
