from .asset import AssetMixin
from .state import ConnectionState
from .types.activity import ActivityEmoji
from .types.message import PartialEmoji as PartialEmojiPayload
from datetime import datetime
from typing import Any, Dict, Optional, Type, TypeVar, Union

class _EmojiTag:
    id: int

PE = TypeVar('PE', bound='PartialEmoji')

class PartialEmoji(_EmojiTag, AssetMixin):
    animated: bool
    name: str
    id: Optional[int] # type: ignore
    def __init__(self, *, name: str, animated: bool = ..., id: Optional[int] = ...) -> None: ...
    @classmethod
    def from_dict(cls: Type[PE], data: Union[PartialEmojiPayload, ActivityEmoji, Dict[str, Any]]) -> PE: ...
    @classmethod
    def from_str(cls: Type[PE], value: str) -> PE: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def with_state(cls: Type[PE], state: ConnectionState, *, name: str, animated: bool = ..., id: Optional[int] = ...) -> PE: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def is_custom_emoji(self) -> bool: ...
    def is_unicode_emoji(self) -> bool: ...
    @property
    def created_at(self) -> Optional[datetime]: ...
    @property
    def url(self) -> str: ... # type: ignore
    async def read(self) -> bytes: ...
