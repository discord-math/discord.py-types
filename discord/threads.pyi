from .abc import Messageable, Snowflake, SnowflakeTime
from .channel import CategoryChannel, ForumChannel, TextChannel
from .enums import ChannelType
from .flags import ChannelFlags
from .guild import Guild
from .member import Member
from .message import Message, PartialMessage
from .mixins import Hashable
from .permissions import Permissions
from .role import Role
from .state import ConnectionState
from .types.threads import Thread as ThreadPayload, ThreadArchiveDuration, ThreadMember as ThreadMemberPayload
from datetime import datetime
from typing import Callable, Iterable, List, Literal, Optional, Union

ThreadChannelType = Literal[ChannelType.news_thread, ChannelType.public_thread, ChannelType.private_thread]

class Thread(Messageable, Hashable):
    name: str
    id: int
    guild: Guild
    owner_id: int
    parent_id: int
    last_message_id: Optional[int]
    message_count: int
    member_count: int
    slowmode_delay: int
    me: Optional[ThreadMember]
    locked: bool
    archived: bool
    invitable: bool
    archiver_id: Optional[int]
    auto_archive_duration: int
    archive_timestamp: datetime
    def __init__(self, *, guild: Guild, state: ConnectionState, data: ThreadPayload) -> None: ...
    @property
    def type(self) -> ThreadChannelType: ...
    @property
    def parent(self) -> Optional[Union[ForumChannel, TextChannel]]: ...
    @property
    def flags(self) -> ChannelFlags: ...
    @property
    def owner(self) -> Optional[Member]: ...
    @property
    def mention(self) -> str: ...
    @property
    def jump_url(self) -> str: ...
    @property
    def members(self) -> List[ThreadMember]: ...
    @property
    def last_message(self) -> Optional[Message]: ...
    @property
    def category(self) -> Optional[CategoryChannel]: ...
    @property
    def category_id(self) -> Optional[int]: ...
    @property
    def created_at(self) -> Optional[datetime]: ...
    def is_private(self) -> bool: ...
    def is_news(self) -> bool: ...
    def is_nsfw(self) -> bool: ...
    def permissions_for(self, obj: Union[Member, Role]) -> Permissions: ...
    async def delete_messages(self, messages: Iterable[Snowflake], *, reason: Optional[str] = ...) -> None: ...
    async def purge(self, *, limit: Optional[int] = ..., check: Callable[[Message], bool] = ..., before: Optional[SnowflakeTime] = ..., after: Optional[SnowflakeTime] = ..., around: Optional[SnowflakeTime] = ..., oldest_first: Optional[bool] = ..., bulk: bool = ..., reason: Optional[str] = ...) -> List[Message]: ...
    async def edit(self, *, name: str = ..., archived: bool = ..., locked: bool = ..., invitable: bool = ..., pinned: bool = ..., slowmode_delay: int = ..., auto_archive_duration: ThreadArchiveDuration = ..., reason: Optional[str] = ...) -> Thread: ...
    async def join(self) -> None: ...
    async def leave(self) -> None: ...
    async def add_user(self, user: Snowflake) -> None: ...
    async def remove_user(self, user: Snowflake) -> None: ...
    async def fetch_member(self, user_id: int) -> ThreadMember: ...
    async def fetch_members(self) -> List[ThreadMember]: ...
    async def delete(self) -> None: ...
    def get_partial_message(self, message_id: int) -> PartialMessage: ...

class ThreadMember(Hashable):
    id: int
    thread_id: int
    joined_at: datetime
    flags: int
    parent: Thread
    def __init__(self, parent: Thread, data: ThreadMemberPayload) -> None: ...
    @property
    def thread(self) -> Thread: ...
