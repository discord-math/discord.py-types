import datetime
from .abc import Messageable, Snowflake, SnowflakeTime
from .channel import CategoryChannel, TextChannel
from .enums import ChannelType
from .guild import Guild
from .member import Member
from .message import Message, PartialMessage
from .mixins import Hashable
from .permissions import Permissions
from .role import Role
from .types.threads import ThreadArchiveDuration
from typing import Any, Callable, Iterable, List, Optional, Union

class Thread(Messageable, Hashable):
    name: str
    guild: Guild
    id: int
    parent_id: int
    owner_id: int
    last_message_id: Optional[int]
    slowmode_delay: int
    message_count: int
    member_count: int
    me: Optional[ThreadMember]
    archived: bool
    locked: bool
    invitable: bool
    archiver_id: Optional[int]
    auto_archive_duration: int
    archive_timestamp: datetime.datetime
    @property
    def type(self) -> ChannelType: ...
    @property
    def parent(self) -> Optional[TextChannel]: ...
    @property
    def owner(self) -> Optional[Member]: ...
    @property
    def mention(self) -> str: ...
    @property
    def members(self) -> List[ThreadMember]: ...
    @property
    def last_message(self) -> Optional[Message]: ...
    @property
    def category(self) -> Optional[CategoryChannel]: ...
    @property
    def category_id(self) -> Optional[int]: ...
    def is_private(self) -> bool: ...
    def is_news(self) -> bool: ...
    def is_nsfw(self) -> bool: ...
    def permissions_for(self, obj: Union[Member, Role]) -> Permissions: ...
    async def delete_messages(self, messages: Iterable[Snowflake]) -> None: ...
    async def purge(self, *, limit: Optional[int] = ..., check: Callable[[Message], bool] = ..., before: Optional[SnowflakeTime] = ..., after: Optional[SnowflakeTime] = ..., around: Optional[SnowflakeTime] = ..., oldest_first: Optional[bool] = ..., bulk: bool = ...) -> List[Message]: ...
    async def edit(self, *, name: str = ..., archived: bool = ..., locked: bool = ..., invitable: bool = ..., slowmode_delay: int = ..., auto_archive_duration: ThreadArchiveDuration = ...) -> Thread: ...
    async def join(self) -> None: ...
    async def leave(self) -> None: ...
    async def add_user(self, user: Snowflake) -> None: ...
    async def remove_user(self, user: Snowflake) -> None: ...
    async def fetch_members(self) -> List[ThreadMember]: ...
    async def delete(self) -> None: ...
    def get_partial_message(self, message_id: int) -> PartialMessage: ...

class ThreadMember(Hashable):
    parent: Thread
    @property
    def thread(self) -> Thread: ...
