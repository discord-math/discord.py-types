import abc
import datetime
from .colour import Colour
from .types.embed import Embed as EmbedData, EmbedType
from typing import Any, Dict, List, Mapping, Optional, Protocol, Type, TypeVar, Union, runtime_checkable

class EmbedProxy:
    def __init__(self, layer: Dict[str, Any]) -> None: ...
    def __len__(self) -> int: ...
    def __getattr__(self, attr: str) -> None: ...
T = TypeVar('T')

@runtime_checkable
class _EmbedFooterProxy(Protocol, metaclass=abc.ABCMeta):
    text: Optional[str]
    icon_url: Optional[str]

@runtime_checkable
class _EmbedFieldProxy(Protocol, metaclass=abc.ABCMeta):
    name: Optional[str]
    value: Optional[str]
    inline: bool

@runtime_checkable
class _EmbedMediaProxy(Protocol, metaclass=abc.ABCMeta):
    url: Optional[str]
    proxy_url: Optional[str]
    height: Optional[int]
    width: Optional[int]

@runtime_checkable
class _EmbedVideoProxy(Protocol, metaclass=abc.ABCMeta):
    url: Optional[str]
    height: Optional[int]
    width: Optional[int]

@runtime_checkable
class _EmbedProviderProxy(Protocol, metaclass=abc.ABCMeta):
    name: Optional[str]
    url: Optional[str]

@runtime_checkable
class _EmbedAuthorProxy(Protocol, metaclass=abc.ABCMeta):
    name: Optional[str]
    url: Optional[str]
    icon_url: Optional[str]
    proxy_icon_url: Optional[str]

E = TypeVar('E', bound='Embed')

class Embed:
    title: Optional[str]
    type: EmbedType
    url: Optional[str]
    description: Optional[str]
    def __init__(self, *, colour: Optional[Union[int, Colour]] = ..., color: Optional[Union[int, Colour]] = ..., title: Optional[Any] = ..., type: EmbedType = ..., url: Optional[Any] = ..., description: Optional[Any] = ..., timestamp: Optional[datetime.datetime] = ...) -> None: ...
    @classmethod
    def from_dict(cls: Type[E], data: Mapping[str, Any]) -> E: ...
    def copy(self: E) -> E: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    @property
    def colour(self) -> Optional[Colour]: ...
    @colour.setter
    def colour(self, value: Optional[Union[int, Colour]]) -> None: ...
    color = colour
    @property
    def timestamp(self) -> Optional[datetime.datetime]: ...
    @timestamp.setter
    def timestamp(self, value: Optional[datetime.datetime]) -> None: ...
    @property
    def footer(self) -> _EmbedFooterProxy: ...
    def set_footer(self: E, *, text: Optional[Any] = ..., icon_url: Optional[Any] = ...) -> E: ...
    def remove_footer(self: E) -> E: ...
    @property
    def image(self) -> _EmbedMediaProxy: ...
    def set_image(self: E, *, url: Optional[Any]) -> E: ...
    @property
    def thumbnail(self) -> _EmbedMediaProxy: ...
    def set_thumbnail(self: E, *, url: Optional[Any]) -> E: ...
    @property
    def video(self) -> _EmbedVideoProxy: ...
    @property
    def provider(self) -> _EmbedProviderProxy: ...
    @property
    def author(self) -> _EmbedAuthorProxy: ...
    def set_author(self: E, *, name: Any, url: Optional[Any] = ..., icon_url: Optional[Any] = ...) -> E: ...
    def remove_author(self: E) -> E: ...
    @property
    def fields(self) -> List[_EmbedFieldProxy]: ...
    def add_field(self: E, *, name: Any, value: Any, inline: bool = ...) -> E: ...
    def insert_field_at(self: E, index: int, *, name: Any, value: Any, inline: bool = ...) -> E: ...
    def clear_fields(self) -> None: ...
    def remove_field(self, index: int) -> None: ...
    def set_field_at(self: E, index: int, *, name: Any, value: Any, inline: bool = ...) -> E: ...
    def to_dict(self) -> EmbedData: ...
