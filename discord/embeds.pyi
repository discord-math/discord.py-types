import abc
import datetime
from .colour import Colour
from discord.types.embed import EmbedType
from typing import Any, Dict, Final, List, Mapping, TypeVar, Union

class _EmptyEmbed:
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...

class EmbedProxy:
    def __init__(self, layer: Dict[str, Any]) -> None: ...
    def __len__(self) -> int: ...
    def __getattr__(self, attr: str) -> _EmptyEmbed: ...

E = TypeVar('E', bound='Embed')
T = TypeVar('T')
MaybeEmpty = Union[T, _EmptyEmbed]

class _EmbedFooterProxy(metaclass=abc.ABCMeta):
    text: MaybeEmpty[str]
    icon_url: MaybeEmpty[str]

class _EmbedFieldProxy(metaclass=abc.ABCMeta):
    name: MaybeEmpty[str]
    value: MaybeEmpty[str]
    inline: bool

class _EmbedMediaProxy(metaclass=abc.ABCMeta):
    url: MaybeEmpty[str]
    proxy_url: MaybeEmpty[str]
    height: MaybeEmpty[int]
    width: MaybeEmpty[int]

class _EmbedVideoProxy(metaclass=abc.ABCMeta):
    url: MaybeEmpty[str]
    height: MaybeEmpty[int]
    width: MaybeEmpty[int]

class _EmbedProviderProxy(metaclass=abc.ABCMeta):
    name: MaybeEmpty[str]
    url: MaybeEmpty[str]

class _EmbedAuthorProxy(metaclass=abc.ABCMeta):
    name: MaybeEmpty[str]
    url: MaybeEmpty[str]
    icon_url: MaybeEmpty[str]
    proxy_icon_url: MaybeEmpty[str]

class Embed:
    Empty: Final[Any]
    title: MaybeEmpty[Any]
    type: EmbedType
    url: MaybeEmpty[Any]
    description: MaybeEmpty[Any]
    def __init__(self, *, colour: Union[int, Colour, _EmptyEmbed] = ..., color: Union[int, Colour, _EmptyEmbed] = ..., title: MaybeEmpty[Any] = ..., type: EmbedType = ..., url: MaybeEmpty[Any] = ..., description: MaybeEmpty[Any] = ..., timestamp: datetime.datetime = ...) -> None: ...
    @classmethod
    def from_dict(cls, data: Mapping[str, Any]) -> E: ...
    def copy(self) -> E: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    @property
    def colour(self) -> MaybeEmpty[Colour]: ...
    @colour.setter
    def colour(self, value: Union[int, Colour, _EmptyEmbed]) -> None: ...
    @property
    def color(self) -> MaybeEmpty[Colour]: ...
    @colour.setter
    def color(self, value: Union[int, Colour, _EmptyEmbed]) -> None: ...
    @property
    def timestamp(self) -> MaybeEmpty[datetime.datetime]: ...
    @timestamp.setter
    def timestamp(self, value: MaybeEmpty[datetime.datetime]) -> None: ...
    @property
    def footer(self) -> _EmbedFooterProxy: ...
    def set_footer(self, *, text: MaybeEmpty[Any] = ..., icon_url: MaybeEmpty[Any] = ...) -> E: ...
    def remove_footer(self) -> E: ...
    @property
    def image(self) -> _EmbedMediaProxy: ...
    def set_image(self, url: MaybeEmpty[Any]) -> E: ...
    @property
    def thumbnail(self) -> _EmbedMediaProxy: ...
    def set_thumbnail(self, url: MaybeEmpty[Any]) -> E: ...
    @property
    def video(self) -> _EmbedVideoProxy: ...
    @property
    def provider(self) -> _EmbedProviderProxy: ...
    @property
    def author(self) -> _EmbedAuthorProxy: ...
    def set_author(self, name: Any, *, url: MaybeEmpty[Any] = ..., icon_url: MaybeEmpty[Any] = ...) -> E: ...
    def remove_author(self) -> E: ...
    @property
    def fields(self) -> List[_EmbedFieldProxy]: ...
    def add_field(self, name: Any, value: Any, *, inline: bool = ...) -> E: ...
    def insert_field_at(self, index: int, name: Any, value: Any, *, inline: bool = ...) -> E: ...
    def clear_fields(self) -> None: ...
    def remove_field(self, index: int) -> None: ...
    def set_field_at(self, index: int, name: Any, value: Any, *, inline: bool = ...) -> E: ...
